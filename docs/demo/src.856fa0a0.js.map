{"version":3,"sources":["../src/dat/index.js","../src/dat/color/toString.js","../src/dat/utils/common.js","../src/dat/color/interpret.js","../src/dat/color/math.js","../src/dat/color/Color.js","../src/dat/controllers/Controller.js","../src/dat/dom/dom.js","../src/dat/controllers/BooleanController.js","../src/dat/controllers/OptionController.js","../src/dat/controllers/StringController.js","../src/dat/controllers/NumberController.js","../src/dat/controllers/NumberControllerBox.js","../src/dat/controllers/NumberControllerSlider.js","../src/dat/controllers/FunctionController.js","../src/dat/controllers/ColorController.js","../src/dat/utils/css.js","../src/dat/gui/saveDialogue.html.js","../src/dat/controllers/ControllerFactory.js","../src/dat/utils/requestAnimationFrame.js","../src/dat/dom/CenteredDiv.js","../src/dat/gui/GUI.js","node_modules/matter-js/build/matter.js","node_modules/webfontloader/webfontloader.js","node_modules/stats.js/build/stats.min.js","../../node_modules/matter-js/build/matter.js","../../src/wheel/textures/ball.ts","../../src/constants.ts","../../src/wheel/bodies/ball.ts","../../src/wheel/bodies/wheel.ts","../../src/wheel/wheel.ts","src/index.ts"],"names":["color","forceCSSHex","colorFormat","__state","conversionName","toString","r","Math","round","g","b","a","h","s","toFixed","v","str","hex","length","ARR_EACH","Array","prototype","forEach","ARR_SLICE","slice","Common","target","each","call","arguments","obj","isObject","Object","keys","key","isUndefined","bind","toCall","args","i","apply","itr","scope","l","BREAK","fnc","func","threshold","callImmediately","timeout","callNow","setTimeout","delayed","toArray","undefined","isNaN","isArray","constructor","Function","INTERPRETATIONS","common","isString","original","test","match","parseInt","parseFloat","isNumber","result","toReturn","interpret","family","litmus","conversions","conversion","read","tmpComponent","ColorMath","hi","floor","f","p","q","t","c","min","max","delta","NaN","hex_with_component","componentIndex","value","Color","Error","colorToString","write","defineRGBComponent","component","componentHexIndex","defineProperty","space","recalculateRGB","defineHSVComponent","recalculateHSV","math","component_from_hex","extend","hsv_to_rgb","rgb_to_hsv","COMPONENTS","rgb_to_hex","Controller","object","property","initialValue","domElement","document","createElement","__onChange","__onFinishChange","newValue","updateDisplay","getValue","EVENT_MAP","EVENT_MAP_INV","k","e","CSS_VALUE_PIXELS","cssValueToPixels","val","isNull","dom","elem","selectable","style","onselectstart","MozUserSelect","KhtmlUserSelect","unselectable","hor","vert","vertical","horizontal","position","left","right","top","bottom","eventType","pars","aux","params","className","evt","createEvent","clientX","x","clientY","y","initMouseEvent","bubbles","cancelable","window","clickCount","init","initKeyboardEvent","initKeyEvent","defaults","ctrlKey","altKey","shiftKey","metaKey","keyCode","charCode","initEvent","dispatchEvent","event","newBool","bool","addEventListener","attachEvent","removeEventListener","detachEvent","classes","split","indexOf","push","join","replace","removeAttribute","index","splice","RegExp","getComputedStyle","width","height","el","offset","offsetParent","offsetLeft","offsetTop","activeElement","type","href","BooleanController","_this","__prev","__checkbox","setAttribute","onChange","setValue","appendChild","checked","OptionController","opts","options","__select","map","element","opt","innerHTML","desiredValue","selectedIndex","isActive","StringController","__input","onBlur","blur","numDecimals","_x","NumberController","_params","__min","__max","__step","step","__impliedStep","pow","log","abs","LN10","__precision","_v","minValue","maxValue","stepValue","roundToDecimal","decimals","tenTo","NumberControllerBox","__truncationSuspended","prevY","onFinish","onMouseDrag","diff","onMouseUp","unbind","attempted","onMouseDown","i1","i2","o1","o2","NumberControllerSlider","preventDefault","bgRect","__background","getBoundingClientRect","onTouchMove","touches","onTouchEnd","__foreground","onTouchStart","addClass","pct","FunctionController","text","__button","fire","ColorController","__color","__temp","makeSelectable","__selector","__saturation_field","__field_knob","__field_knob_border","__hue_knob","__hue_field","__input_textShadow","removeClass","valueField","fieldDown","setSV","fieldUpSV","fieldDownH","setH","fieldUpH","toOriginal","fieldRect","mismatch","flip","_flip","toHexString","marginTop","vendors","linearGradient","background","vendor","cssText","hueGradient","css","url","indoc","doc","link","rel","getElementsByTagName","cssContent","injected","head","saveDialogContents","ControllerFactory","isFunction","isBoolean","requestAnimationFrame","callback","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","CenteredDiv","backgroundElement","makeFullscreen","body","hide","display","opacity","webkitTransform","layout","defer","innerWidth","getWidth","innerHeight","getHeight","inject","styleSheet","CSS_NAMESPACE","HIDE_KEY_CODE","CLOSE_BUTTON_HEIGHT","DEFAULT_DEFAULT_PRESET_NAME","SUPPORTS_LOCAL_STORAGE","localStorage","SAVE_DIALOGUE","autoPlaceVirgin","autoPlaceContainer","hideableGuis","GUI","__ul","__folders","__controllers","__rememberedObjects","__rememberedObjectIndecesToControllers","__listening","DEFAULT_WIDTH","autoPlace","load","preset","parent","hideable","resizable","scrollable","useLocalStorage","root","getItem","getLocalStorageHash","saveToLocalStorage","titleRow","defineProperties","closeOnTop","getRoot","revert","name","closed","CLASS_CLOSED","onResize","__closeButton","TEXT_OPEN","TEXT_CLOSED","setItem","CLASS_MAIN","savedGui","JSON","parse","CLASS_CLOSE_BUTTON","CLASS_CLOSE_TOP","insertBefore","childNodes","CLASS_CLOSE_BOTTOM","titleRowName","createTextNode","addRow","CLASS_AUTO_PLACE_CONTAINER","CLASS_AUTO_PLACE","__resizeHandler","onResizeDebounced","stringify","getSaveObject","saveToLocalStorageIfPossible","gui","newDom","liBefore","li","removeListeners","markPresetModified","modified","__preset_select","augmentController","controller","__li","__gui","nextSibling","nextElementSibling","add","remove","firstElementChild","listen","box","method","pc","pb","returned","oldName","wasListening","newController","compose","fakeEvent","stopPropagation","borderLeftColor","isModified","recallSavedValue","matchedIndex","controllerMap","remembered","presetMap","factoryArgs","concat","before","container","CLASS_CONTROLLER_ROW","location","addPresetOption","setSelected","showHideExplain","explain","addSaveMenu","div","__save_row","firstChild","gears","button","button2","button3","select","getElementById","localStorageCheckBox","newConstructorTextArea","which","show","focus","save","presetName","prompt","saveAs","addResizeHandle","pmouseX","drag","dragStop","CLASS_DRAG","dragStart","__resize_handle","setWidth","w","getCurrentPreset","useInitialValues","savedValues","setPresetSelectIndex","updateDisplays","controllerArray","toggleHide","CLASS_TOO_TALL","_keydownHandler","removeChild","subfolder","removeFolder","newGuiParams","folders","folder","parentElement","getOffset","node","offsetHeight","debounce","saveDialogueContents","controllers","domImport","GUIImport"],"mappings":"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","file":"src.856fa0a0.js","sourceRoot":"../../demos/matter-tools-demo","sourcesContent":["/**\n * dat-gui JavaScript Controller Library\n * http://code.google.com/p/dat-gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport Color from './color/Color';\nimport math from './color/math';\nimport interpret from './color/interpret';\n\nimport Controller from './controllers/Controller';\nimport BooleanController from './controllers/BooleanController';\nimport OptionController from './controllers/OptionController';\nimport StringController from './controllers/StringController';\nimport NumberController from './controllers/NumberController';\nimport NumberControllerBox from './controllers/NumberControllerBox';\nimport NumberControllerSlider from './controllers/NumberControllerSlider';\nimport FunctionController from './controllers/FunctionController';\nimport ColorController from './controllers/ColorController';\n\nimport domImport from './dom/dom';\nimport GUIImport from './gui/GUI';\n\nexport const color = {\n  Color: Color,\n  math: math,\n  interpret: interpret\n};\n\nexport const controllers = {\n  Controller: Controller,\n  BooleanController: BooleanController,\n  OptionController: OptionController,\n  StringController: StringController,\n  NumberController: NumberController,\n  NumberControllerBox: NumberControllerBox,\n  NumberControllerSlider: NumberControllerSlider,\n  FunctionController: FunctionController,\n  ColorController: ColorController\n};\n\nexport const dom = { dom: domImport };\n\nexport const gui = { GUI: GUIImport };\n\nexport const GUI = GUIImport;\n\nexport default {\n  color,\n  controllers,\n  dom,\n  gui,\n  GUI\n};\n","/**\n * dat-gui JavaScript Controller Library\n * http://code.google.com/p/dat-gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nexport default function(color, forceCSSHex) {\n  const colorFormat = color.__state.conversionName.toString();\n\n  const r = Math.round(color.r);\n  const g = Math.round(color.g);\n  const b = Math.round(color.b);\n  const a = color.a;\n  const h = Math.round(color.h);\n  const s = color.s.toFixed(1);\n  const v = color.v.toFixed(1);\n\n  if (forceCSSHex || (colorFormat === 'THREE_CHAR_HEX') || (colorFormat === 'SIX_CHAR_HEX')) {\n    let str = color.hex.toString(16);\n    while (str.length < 6) {\n      str = '0' + str;\n    }\n    return '#' + str;\n  } else if (colorFormat === 'CSS_RGB') {\n    return 'rgb(' + r + ',' + g + ',' + b + ')';\n  } else if (colorFormat === 'CSS_RGBA') {\n    return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n  } else if (colorFormat === 'HEX') {\n    return '0x' + color.hex.toString(16);\n  } else if (colorFormat === 'RGB_ARRAY') {\n    return '[' + r + ',' + g + ',' + b + ']';\n  } else if (colorFormat === 'RGBA_ARRAY') {\n    return '[' + r + ',' + g + ',' + b + ',' + a + ']';\n  } else if (colorFormat === 'RGB_OBJ') {\n    return '{r:' + r + ',g:' + g + ',b:' + b + '}';\n  } else if (colorFormat === 'RGBA_OBJ') {\n    return '{r:' + r + ',g:' + g + ',b:' + b + ',a:' + a + '}';\n  } else if (colorFormat === 'HSV_OBJ') {\n    return '{h:' + h + ',s:' + s + ',v:' + v + '}';\n  } else if (colorFormat === 'HSVA_OBJ') {\n    return '{h:' + h + ',s:' + s + ',v:' + v + ',a:' + a + '}';\n  }\n\n  return 'unknown format';\n}\n","/**\n * dat-gui JavaScript Controller Library\n * http://code.google.com/p/dat-gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nconst ARR_EACH = Array.prototype.forEach;\nconst ARR_SLICE = Array.prototype.slice;\n\n/**\n * Band-aid methods for things that should be a lot easier in JavaScript.\n * Implementation and structure inspired by underscore.js\n * http://documentcloud.github.com/underscore/\n */\n\nconst Common = {\n  BREAK: {},\n\n  extend: function(target) {\n    this.each(ARR_SLICE.call(arguments, 1), function(obj) {\n      const keys = this.isObject(obj) ? Object.keys(obj) : [];\n      keys.forEach(function(key) {\n        if (!this.isUndefined(obj[key])) {\n          target[key] = obj[key];\n        }\n      }.bind(this));\n    }, this);\n\n    return target;\n  },\n\n  defaults: function(target) {\n    this.each(ARR_SLICE.call(arguments, 1), function(obj) {\n      const keys = this.isObject(obj) ? Object.keys(obj) : [];\n      keys.forEach(function(key) {\n        if (this.isUndefined(target[key])) {\n          target[key] = obj[key];\n        }\n      }.bind(this));\n    }, this);\n\n    return target;\n  },\n\n  compose: function() {\n    const toCall = ARR_SLICE.call(arguments);\n    return function() {\n      let args = ARR_SLICE.call(arguments);\n      for (let i = toCall.length - 1; i >= 0; i--) {\n        args = [toCall[i].apply(this, args)];\n      }\n      return args[0];\n    };\n  },\n\n  each: function(obj, itr, scope) {\n    if (!obj) {\n      return;\n    }\n\n    if (ARR_EACH && obj.forEach && obj.forEach === ARR_EACH) {\n      obj.forEach(itr, scope);\n    } else if (obj.length === obj.length + 0) { // Is number but not NaN\n      let key;\n      let l;\n      for (key = 0, l = obj.length; key < l; key++) {\n        if (key in obj && itr.call(scope, obj[key], key) === this.BREAK) {\n          return;\n        }\n      }\n    } else {\n      for (const key in obj) {\n        if (itr.call(scope, obj[key], key) === this.BREAK) {\n          return;\n        }\n      }\n    }\n  },\n\n  defer: function(fnc) {\n    setTimeout(fnc, 0);\n  },\n\n  // if the function is called repeatedly, wait until threshold passes until we execute the function\n  debounce: function(func, threshold, callImmediately) {\n    let timeout;\n\n    return function() {\n      const obj = this;\n      const args = arguments;\n      function delayed() {\n        timeout = null;\n        if (!callImmediately) func.apply(obj, args);\n      }\n\n      const callNow = callImmediately || !timeout;\n\n      clearTimeout(timeout);\n      timeout = setTimeout(delayed, threshold);\n\n      if (callNow) {\n        func.apply(obj, args);\n      }\n    };\n  },\n\n  toArray: function(obj) {\n    if (obj.toArray) return obj.toArray();\n    return ARR_SLICE.call(obj);\n  },\n\n  isUndefined: function(obj) {\n    return obj === undefined;\n  },\n\n  isNull: function(obj) {\n    return obj === null;\n  },\n\n  isNaN: function(obj) {\n    return isNaN(obj);\n  },\n\n  isArray: Array.isArray || function(obj) {\n    return obj.constructor === Array;\n  },\n\n  isObject: function(obj) {\n    return obj === Object(obj);\n  },\n\n  isNumber: function(obj) {\n    return obj === obj + 0;\n  },\n\n  isString: function(obj) {\n    return obj === obj + '';\n  },\n\n  isBoolean: function(obj) {\n    return obj === false || obj === true;\n  },\n\n  isFunction: function(obj) {\n    return obj instanceof Function;\n  }\n\n};\n\nexport default Common;\n","/**\n * dat-gui JavaScript Controller Library\n * http://code.google.com/p/dat-gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport toString from './toString';\nimport common from '../utils/common';\n\nconst INTERPRETATIONS = [\n  // Strings\n  {\n    litmus: common.isString,\n    conversions: {\n      THREE_CHAR_HEX: {\n        read: function(original) {\n          const test = original.match(/^#([A-F0-9])([A-F0-9])([A-F0-9])$/i);\n          if (test === null) {\n            return false;\n          }\n\n          return {\n            space: 'HEX',\n            hex: parseInt(\n              '0x' +\n              test[1].toString() + test[1].toString() +\n              test[2].toString() + test[2].toString() +\n              test[3].toString() + test[3].toString(), 0)\n          };\n        },\n\n        write: toString\n      },\n\n      SIX_CHAR_HEX: {\n        read: function(original) {\n          const test = original.match(/^#([A-F0-9]{6})$/i);\n          if (test === null) {\n            return false;\n          }\n\n          return {\n            space: 'HEX',\n            hex: parseInt('0x' + test[1].toString(), 0)\n          };\n        },\n\n        write: toString\n      },\n\n      CSS_RGB: {\n        read: function(original) {\n          const test = original.match(/^rgb\\(\\s*(.+)\\s*,\\s*(.+)\\s*,\\s*(.+)\\s*\\)/);\n          if (test === null) {\n            return false;\n          }\n\n          return {\n            space: 'RGB',\n            r: parseFloat(test[1]),\n            g: parseFloat(test[2]),\n            b: parseFloat(test[3])\n          };\n        },\n\n        write: toString\n      },\n\n      CSS_RGBA: {\n        read: function(original) {\n          const test = original.match(/^rgba\\(\\s*(.+)\\s*,\\s*(.+)\\s*,\\s*(.+)\\s*,\\s*(.+)\\s*\\)/);\n          if (test === null) {\n            return false;\n          }\n\n          return {\n            space: 'RGB',\n            r: parseFloat(test[1]),\n            g: parseFloat(test[2]),\n            b: parseFloat(test[3]),\n            a: parseFloat(test[4])\n          };\n        },\n\n        write: toString\n      }\n    }\n  },\n\n  // Numbers\n  {\n    litmus: common.isNumber,\n\n    conversions: {\n\n      HEX: {\n        read: function(original) {\n          return {\n            space: 'HEX',\n            hex: original,\n            conversionName: 'HEX'\n          };\n        },\n\n        write: function(color) {\n          return color.hex;\n        }\n      }\n\n    }\n\n  },\n\n  // Arrays\n  {\n    litmus: common.isArray,\n    conversions: {\n      RGB_ARRAY: {\n        read: function(original) {\n          if (original.length !== 3) {\n            return false;\n          }\n\n          return {\n            space: 'RGB',\n            r: original[0],\n            g: original[1],\n            b: original[2]\n          };\n        },\n\n        write: function(color) {\n          return [color.r, color.g, color.b];\n        }\n      },\n\n      RGBA_ARRAY: {\n        read: function(original) {\n          if (original.length !== 4) return false;\n          return {\n            space: 'RGB',\n            r: original[0],\n            g: original[1],\n            b: original[2],\n            a: original[3]\n          };\n        },\n\n        write: function(color) {\n          return [color.r, color.g, color.b, color.a];\n        }\n      }\n    }\n  },\n\n  // Objects\n  {\n    litmus: common.isObject,\n    conversions: {\n\n      RGBA_OBJ: {\n        read: function(original) {\n          if (common.isNumber(original.r) &&\n            common.isNumber(original.g) &&\n            common.isNumber(original.b) &&\n            common.isNumber(original.a)) {\n            return {\n              space: 'RGB',\n              r: original.r,\n              g: original.g,\n              b: original.b,\n              a: original.a\n            };\n          }\n          return false;\n        },\n\n        write: function(color) {\n          return {\n            r: color.r,\n            g: color.g,\n            b: color.b,\n            a: color.a\n          };\n        }\n      },\n\n      RGB_OBJ: {\n        read: function(original) {\n          if (common.isNumber(original.r) &&\n            common.isNumber(original.g) &&\n            common.isNumber(original.b)) {\n            return {\n              space: 'RGB',\n              r: original.r,\n              g: original.g,\n              b: original.b\n            };\n          }\n          return false;\n        },\n\n        write: function(color) {\n          return {\n            r: color.r,\n            g: color.g,\n            b: color.b\n          };\n        }\n      },\n\n      HSVA_OBJ: {\n        read: function(original) {\n          if (common.isNumber(original.h) &&\n            common.isNumber(original.s) &&\n            common.isNumber(original.v) &&\n            common.isNumber(original.a)) {\n            return {\n              space: 'HSV',\n              h: original.h,\n              s: original.s,\n              v: original.v,\n              a: original.a\n            };\n          }\n          return false;\n        },\n\n        write: function(color) {\n          return {\n            h: color.h,\n            s: color.s,\n            v: color.v,\n            a: color.a\n          };\n        }\n      },\n\n      HSV_OBJ: {\n        read: function(original) {\n          if (common.isNumber(original.h) &&\n            common.isNumber(original.s) &&\n            common.isNumber(original.v)) {\n            return {\n              space: 'HSV',\n              h: original.h,\n              s: original.s,\n              v: original.v\n            };\n          }\n          return false;\n        },\n\n        write: function(color) {\n          return {\n            h: color.h,\n            s: color.s,\n            v: color.v\n          };\n        }\n      }\n    }\n  }\n];\n\nlet result;\nlet toReturn;\n\nconst interpret = function() {\n  toReturn = false;\n\n  const original = arguments.length > 1 ? common.toArray(arguments) : arguments[0];\n  common.each(INTERPRETATIONS, function(family) {\n    if (family.litmus(original)) {\n      common.each(family.conversions, function(conversion, conversionName) {\n        result = conversion.read(original);\n\n        if (toReturn === false && result !== false) {\n          toReturn = result;\n          result.conversionName = conversionName;\n          result.conversion = conversion;\n          return common.BREAK;\n        }\n      });\n\n      return common.BREAK;\n    }\n  });\n\n  return toReturn;\n};\n\nexport default interpret;\n","/**\n * dat-gui JavaScript Controller Library\n * http://code.google.com/p/dat-gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nlet tmpComponent;\n\nconst ColorMath = {\n  hsv_to_rgb: function(h, s, v) {\n    const hi = Math.floor(h / 60) % 6;\n\n    const f = h / 60 - Math.floor(h / 60);\n    const p = v * (1.0 - s);\n    const q = v * (1.0 - (f * s));\n    const t = v * (1.0 - ((1.0 - f) * s));\n\n    const c = [\n      [v, t, p],\n      [q, v, p],\n      [p, v, t],\n      [p, q, v],\n      [t, p, v],\n      [v, p, q]\n    ][hi];\n\n    return {\n      r: c[0] * 255,\n      g: c[1] * 255,\n      b: c[2] * 255\n    };\n  },\n\n  rgb_to_hsv: function(r, g, b) {\n    const min = Math.min(r, g, b);\n    const max = Math.max(r, g, b);\n    const delta = max - min;\n    let h;\n    let s;\n\n    if (max !== 0) {\n      s = delta / max;\n    } else {\n      return {\n        h: NaN,\n        s: 0,\n        v: 0\n      };\n    }\n\n    if (r === max) {\n      h = (g - b) / delta;\n    } else if (g === max) {\n      h = 2 + (b - r) / delta;\n    } else {\n      h = 4 + (r - g) / delta;\n    }\n    h /= 6;\n    if (h < 0) {\n      h += 1;\n    }\n\n    return {\n      h: h * 360,\n      s: s,\n      v: max / 255\n    };\n  },\n\n  rgb_to_hex: function(r, g, b) {\n    let hex = this.hex_with_component(0, 2, r);\n    hex = this.hex_with_component(hex, 1, g);\n    hex = this.hex_with_component(hex, 0, b);\n    return hex;\n  },\n\n  component_from_hex: function(hex, componentIndex) {\n    return (hex >> (componentIndex * 8)) & 0xFF;\n  },\n\n  hex_with_component: function(hex, componentIndex, value) {\n    return value << (tmpComponent = componentIndex * 8) | (hex & ~(0xFF << tmpComponent));\n  }\n};\n\nexport default ColorMath;\n","/**\n * dat-gui JavaScript Controller Library\n * http://code.google.com/p/dat-gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport interpret from './interpret';\nimport math from './math';\nimport colorToString from './toString';\nimport common from '../utils/common';\n\nclass Color {\n  constructor() {\n    this.__state = interpret.apply(this, arguments);\n\n    if (this.__state === false) {\n      throw new Error('Failed to interpret color arguments');\n    }\n\n    this.__state.a = this.__state.a || 1;\n  }\n\n  toString() {\n    return colorToString(this);\n  }\n\n  toHexString() {\n    return colorToString(this, true);\n  }\n\n  toOriginal() {\n    return this.__state.conversion.write(this);\n  }\n}\n\nfunction defineRGBComponent(target, component, componentHexIndex) {\n  Object.defineProperty(target, component, {\n    get: function() {\n      if (this.__state.space === 'RGB') {\n        return this.__state[component];\n      }\n\n      Color.recalculateRGB(this, component, componentHexIndex);\n\n      return this.__state[component];\n    },\n\n    set: function(v) {\n      if (this.__state.space !== 'RGB') {\n        Color.recalculateRGB(this, component, componentHexIndex);\n        this.__state.space = 'RGB';\n      }\n\n      this.__state[component] = v;\n    }\n  });\n}\n\nfunction defineHSVComponent(target, component) {\n  Object.defineProperty(target, component, {\n    get: function() {\n      if (this.__state.space === 'HSV') {\n        return this.__state[component];\n      }\n\n      Color.recalculateHSV(this);\n\n      return this.__state[component];\n    },\n\n    set: function(v) {\n      if (this.__state.space !== 'HSV') {\n        Color.recalculateHSV(this);\n        this.__state.space = 'HSV';\n      }\n\n      this.__state[component] = v;\n    }\n  });\n}\n\n\nColor.recalculateRGB = function(color, component, componentHexIndex) {\n  if (color.__state.space === 'HEX') {\n    color.__state[component] = math.component_from_hex(color.__state.hex, componentHexIndex);\n  } else if (color.__state.space === 'HSV') {\n    common.extend(color.__state, math.hsv_to_rgb(color.__state.h, color.__state.s, color.__state.v));\n  } else {\n    throw new Error('Corrupted color state');\n  }\n};\n\nColor.recalculateHSV = function(color) {\n  const result = math.rgb_to_hsv(color.r, color.g, color.b);\n\n  common.extend(color.__state,\n    {\n      s: result.s,\n      v: result.v\n    }\n  );\n\n  if (!common.isNaN(result.h)) {\n    color.__state.h = result.h;\n  } else if (common.isUndefined(color.__state.h)) {\n    color.__state.h = 0;\n  }\n};\n\nColor.COMPONENTS = ['r', 'g', 'b', 'h', 's', 'v', 'hex', 'a'];\n\ndefineRGBComponent(Color.prototype, 'r', 2);\ndefineRGBComponent(Color.prototype, 'g', 1);\ndefineRGBComponent(Color.prototype, 'b', 0);\n\ndefineHSVComponent(Color.prototype, 'h');\ndefineHSVComponent(Color.prototype, 's');\ndefineHSVComponent(Color.prototype, 'v');\n\nObject.defineProperty(Color.prototype, 'a', {\n  get: function() {\n    return this.__state.a;\n  },\n\n  set: function(v) {\n    this.__state.a = v;\n  }\n});\n\nObject.defineProperty(Color.prototype, 'hex', {\n  get: function() {\n    if (this.__state.space !== 'HEX') {\n      this.__state.hex = math.rgb_to_hex(this.r, this.g, this.b);\n      this.__state.space = 'HEX';\n    }\n\n    return this.__state.hex;\n  },\n\n  set: function(v) {\n    this.__state.space = 'HEX';\n    this.__state.hex = v;\n  }\n});\n\nexport default Color;\n","/**\n * dat-gui JavaScript Controller Library\n * http://code.google.com/p/dat-gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\n/**\n * @class An \"abstract\" class that represents a given property of an object.\n *\n * @param {Object} object The object to be manipulated\n * @param {string} property The name of the property to be manipulated\n */\nclass Controller {\n  constructor(object, property) {\n    this.initialValue = object[property];\n\n    /**\n     * Those who extend this class will put their DOM elements in here.\n     * @type {DOMElement}\n     */\n    this.domElement = document.createElement('div');\n\n    /**\n     * The object to manipulate\n     * @type {Object}\n     */\n    this.object = object;\n\n    /**\n     * The name of the property to manipulate\n     * @type {String}\n     */\n    this.property = property;\n\n    /**\n     * The function to be called on change.\n     * @type {Function}\n     * @ignore\n     */\n    this.__onChange = undefined;\n\n    /**\n     * The function to be called on finishing change.\n     * @type {Function}\n     * @ignore\n     */\n    this.__onFinishChange = undefined;\n  }\n\n  /**\n   * Specify that a function fire every time someone changes the value with\n   * this Controller.\n   *\n   * @param {Function} fnc This function will be called whenever the value\n   * is modified via this Controller.\n   * @returns {Controller} this\n   */\n  onChange(fnc) {\n    this.__onChange = fnc;\n    return this;\n  }\n\n  /**\n   * Specify that a function fire every time someone \"finishes\" changing\n   * the value wih this Controller. Useful for values that change\n   * incrementally like numbers or strings.\n   *\n   * @param {Function} fnc This function will be called whenever\n   * someone \"finishes\" changing the value via this Controller.\n   * @returns {Controller} this\n   */\n  onFinishChange(fnc) {\n    this.__onFinishChange = fnc;\n    return this;\n  }\n\n  /**\n   * Change the value of <code>object[property]</code>\n   *\n   * @param {Object} newValue The new value of <code>object[property]</code>\n   */\n  setValue(newValue) {\n    this.object[this.property] = newValue;\n    if (this.__onChange) {\n      this.__onChange.call(this, newValue);\n    }\n\n    this.updateDisplay();\n    return this;\n  }\n\n  /**\n   * Gets the value of <code>object[property]</code>\n   *\n   * @returns {Object} The current value of <code>object[property]</code>\n   */\n  getValue() {\n    return this.object[this.property];\n  }\n\n  /**\n   * Refreshes the visual display of a Controller in order to keep sync\n   * with the object's current value.\n   * @returns {Controller} this\n   */\n  updateDisplay() {\n    return this;\n  }\n\n  /**\n   * @returns {Boolean} true if the value has deviated from initialValue\n   */\n  isModified() {\n    return this.initialValue !== this.getValue();\n  }\n}\n\nexport default Controller;\n","/**\n * dat-gui JavaScript Controller Library\n * http://code.google.com/p/dat-gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport common from '../utils/common';\n\nconst EVENT_MAP = {\n  HTMLEvents: ['change'],\n  MouseEvents: ['click', 'mousemove', 'mousedown', 'mouseup', 'mouseover'],\n  KeyboardEvents: ['keydown']\n};\n\nconst EVENT_MAP_INV = {};\ncommon.each(EVENT_MAP, function(v, k) {\n  common.each(v, function(e) {\n    EVENT_MAP_INV[e] = k;\n  });\n});\n\nconst CSS_VALUE_PIXELS = /(\\d+(\\.\\d+)?)px/;\n\nfunction cssValueToPixels(val) {\n  if (val === '0' || common.isUndefined(val)) {\n    return 0;\n  }\n\n  const match = val.match(CSS_VALUE_PIXELS);\n\n  if (!common.isNull(match)) {\n    return parseFloat(match[1]);\n  }\n\n  // TODO ...ems? %?\n\n  return 0;\n}\n\n/**\n * @namespace\n * @member dat.dom\n */\nconst dom = {\n\n  /**\n   *\n   * @param elem\n   * @param selectable\n   */\n  makeSelectable: function(elem, selectable) {\n    if (elem === undefined || elem.style === undefined) return;\n\n    elem.onselectstart = selectable ? function() {\n      return false;\n    } : function() {\n    };\n\n    elem.style.MozUserSelect = selectable ? 'auto' : 'none';\n    elem.style.KhtmlUserSelect = selectable ? 'auto' : 'none';\n    elem.unselectable = selectable ? 'on' : 'off';\n  },\n\n  /**\n   *\n   * @param elem\n   * @param horizontal\n   * @param vert\n   */\n  makeFullscreen: function(elem, hor, vert) {\n    let vertical = vert;\n    let horizontal = hor;\n\n    if (common.isUndefined(horizontal)) {\n      horizontal = true;\n    }\n\n    if (common.isUndefined(vertical)) {\n      vertical = true;\n    }\n\n    elem.style.position = 'absolute';\n\n    if (horizontal) {\n      elem.style.left = 0;\n      elem.style.right = 0;\n    }\n    if (vertical) {\n      elem.style.top = 0;\n      elem.style.bottom = 0;\n    }\n  },\n\n  /**\n   *\n   * @param elem\n   * @param eventType\n   * @param params\n   */\n  fakeEvent: function(elem, eventType, pars, aux) {\n    const params = pars || {};\n    const className = EVENT_MAP_INV[eventType];\n    if (!className) {\n      throw new Error('Event type ' + eventType + ' not supported.');\n    }\n    const evt = document.createEvent(className);\n    switch (className) {\n      case 'MouseEvents':\n        {\n          const clientX = params.x || params.clientX || 0;\n          const clientY = params.y || params.clientY || 0;\n          evt.initMouseEvent(eventType, params.bubbles || false,\n            params.cancelable || true, window, params.clickCount || 1,\n            0, // screen X\n            0, // screen Y\n            clientX, // client X\n            clientY, // client Y\n            false, false, false, false, 0, null);\n          break;\n        }\n      case 'KeyboardEvents':\n        {\n          const init = evt.initKeyboardEvent || evt.initKeyEvent; // webkit || moz\n          common.defaults(params, {\n            cancelable: true,\n            ctrlKey: false,\n            altKey: false,\n            shiftKey: false,\n            metaKey: false,\n            keyCode: undefined,\n            charCode: undefined\n          });\n          init(eventType, params.bubbles || false,\n            params.cancelable, window,\n            params.ctrlKey, params.altKey,\n            params.shiftKey, params.metaKey,\n            params.keyCode, params.charCode);\n          break;\n        }\n      default:\n        {\n          evt.initEvent(eventType, params.bubbles || false, params.cancelable || true);\n          break;\n        }\n    }\n    common.defaults(evt, aux);\n    elem.dispatchEvent(evt);\n  },\n\n  /**\n   *\n   * @param elem\n   * @param event\n   * @param func\n   * @param bool\n   */\n  bind: function(elem, event, func, newBool) {\n    const bool = newBool || false;\n    if (elem.addEventListener) {\n      elem.addEventListener(event, func, bool);\n    } else if (elem.attachEvent) {\n      elem.attachEvent('on' + event, func);\n    }\n    return dom;\n  },\n\n  /**\n   *\n   * @param elem\n   * @param event\n   * @param func\n   * @param bool\n   */\n  unbind: function(elem, event, func, newBool) {\n    const bool = newBool || false;\n    if (elem.removeEventListener) {\n      elem.removeEventListener(event, func, bool);\n    } else if (elem.detachEvent) {\n      elem.detachEvent('on' + event, func);\n    }\n    return dom;\n  },\n\n  /**\n   *\n   * @param elem\n   * @param className\n   */\n  addClass: function(elem, className) {\n    if (elem.className === undefined) {\n      elem.className = className;\n    } else if (elem.className !== className) {\n      const classes = elem.className.split(/ +/);\n      if (classes.indexOf(className) === -1) {\n        classes.push(className);\n        elem.className = classes.join(' ').replace(/^\\s+/, '').replace(/\\s+$/, '');\n      }\n    }\n    return dom;\n  },\n\n  /**\n   *\n   * @param elem\n   * @param className\n   */\n  removeClass: function(elem, className) {\n    if (className) {\n      if (elem.className === className) {\n        elem.removeAttribute('class');\n      } else {\n        const classes = elem.className.split(/ +/);\n        const index = classes.indexOf(className);\n        if (index !== -1) {\n          classes.splice(index, 1);\n          elem.className = classes.join(' ');\n        }\n      }\n    } else {\n      elem.className = undefined;\n    }\n    return dom;\n  },\n\n  hasClass: function(elem, className) {\n    return new RegExp('(?:^|\\\\s+)' + className + '(?:\\\\s+|$)').test(elem.className) || false;\n  },\n\n  /**\n   *\n   * @param elem\n   */\n  getWidth: function(elem) {\n    const style = getComputedStyle(elem);\n\n    return cssValueToPixels(style['border-left-width']) +\n      cssValueToPixels(style['border-right-width']) +\n      cssValueToPixels(style['padding-left']) +\n      cssValueToPixels(style['padding-right']) +\n      cssValueToPixels(style.width);\n  },\n\n  /**\n   *\n   * @param elem\n   */\n  getHeight: function(elem) {\n    const style = getComputedStyle(elem);\n\n    return cssValueToPixels(style['border-top-width']) +\n      cssValueToPixels(style['border-bottom-width']) +\n      cssValueToPixels(style['padding-top']) +\n      cssValueToPixels(style['padding-bottom']) +\n      cssValueToPixels(style.height);\n  },\n\n  /**\n   *\n   * @param el\n   */\n  getOffset: function(el) {\n    let elem = el;\n    const offset = { left: 0, top: 0 };\n    if (elem.offsetParent) {\n      do {\n        offset.left += elem.offsetLeft;\n        offset.top += elem.offsetTop;\n        elem = elem.offsetParent;\n      } while (elem);\n    }\n    return offset;\n  },\n\n  // http://stackoverflow.com/posts/2684561/revisions\n  /**\n   *\n   * @param elem\n   */\n  isActive: function(elem) {\n    return elem === document.activeElement && (elem.type || elem.href);\n  }\n\n};\n\nexport default dom;\n","/**\n * dat-gui JavaScript Controller Library\n * http://code.google.com/p/dat-gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport Controller from './Controller';\nimport dom from '../dom/dom';\n\n/**\n * @class Provides a checkbox input to alter the boolean property of an object.\n *\n * @extends dat.controllers.Controller\n *\n * @param {Object} object The object to be manipulated\n * @param {string} property The name of the property to be manipulated\n */\nclass BooleanController extends Controller {\n  constructor(object, property) {\n    super(object, property);\n\n    const _this = this;\n    this.__prev = this.getValue();\n\n    this.__checkbox = document.createElement('input');\n    this.__checkbox.setAttribute('type', 'checkbox');\n\n    function onChange() {\n      _this.setValue(!_this.__prev);\n    }\n\n    dom.bind(this.__checkbox, 'change', onChange, false);\n\n    this.domElement.appendChild(this.__checkbox);\n\n    // Match original value\n    this.updateDisplay();\n  }\n\n  setValue(v) {\n    const toReturn = super.setValue(v);\n    if (this.__onFinishChange) {\n      this.__onFinishChange.call(this, this.getValue());\n    }\n    this.__prev = this.getValue();\n    return toReturn;\n  }\n\n  updateDisplay() {\n    if (this.getValue() === true) {\n      this.__checkbox.setAttribute('checked', 'checked');\n      this.__checkbox.checked = true;\n      this.__prev = true;\n    } else {\n      this.__checkbox.checked = false;\n      this.__prev = false;\n    }\n\n    return super.updateDisplay();\n  }\n}\n\nexport default BooleanController;\n","/**\n * dat-gui JavaScript Controller Library\n * http://code.google.com/p/dat-gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport Controller from './Controller';\nimport dom from '../dom/dom';\nimport common from '../utils/common';\n\n/**\n * @class Provides a select input to alter the property of an object, using a\n * list of accepted values.\n *\n * @extends dat.controllers.Controller\n *\n * @param {Object} object The object to be manipulated\n * @param {string} property The name of the property to be manipulated\n * @param {Object|string[]} options A map of labels to acceptable values, or\n * a list of acceptable string values.\n */\nclass OptionController extends Controller {\n  constructor(object, property, opts) {\n    super(object, property);\n\n    let options = opts;\n\n    const _this = this;\n\n    /**\n     * The drop down menu\n     * @ignore\n     */\n    this.__select = document.createElement('select');\n\n    if (common.isArray(options)) {\n      const map = {};\n      common.each(options, function(element) {\n        map[element] = element;\n      });\n      options = map;\n    }\n\n    common.each(options, function(value, key) {\n      const opt = document.createElement('option');\n      opt.innerHTML = key;\n      opt.setAttribute('value', value);\n      _this.__select.appendChild(opt);\n    });\n\n    // Acknowledge original value\n    this.updateDisplay();\n\n    dom.bind(this.__select, 'change', function() {\n      const desiredValue = this.options[this.selectedIndex].value;\n      _this.setValue(desiredValue);\n    });\n\n    this.domElement.appendChild(this.__select);\n  }\n\n  setValue(v) {\n    const toReturn = super.setValue(v);\n\n    if (this.__onFinishChange) {\n      this.__onFinishChange.call(this, this.getValue());\n    }\n    return toReturn;\n  }\n\n  updateDisplay() {\n    if (dom.isActive(this.__select)) return this; // prevent number from updating if user is trying to manually update\n    this.__select.value = this.getValue();\n    return super.updateDisplay();\n  }\n}\n\nexport default OptionController;\n","/**\n * dat-gui JavaScript Controller Library\n * http://code.google.com/p/dat-gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport Controller from './Controller';\nimport dom from '../dom/dom';\n\n/**\n * @class Provides a text input to alter the string property of an object.\n *\n * @extends dat.controllers.Controller\n *\n * @param {Object} object The object to be manipulated\n * @param {string} property The name of the property to be manipulated\n */\nclass StringController extends Controller {\n  constructor(object, property) {\n    super(object, property);\n\n    const _this = this;\n\n    function onChange() {\n      _this.setValue(_this.__input.value);\n    }\n\n    function onBlur() {\n      if (_this.__onFinishChange) {\n        _this.__onFinishChange.call(_this, _this.getValue());\n      }\n    }\n\n    this.__input = document.createElement('input');\n    this.__input.setAttribute('type', 'text');\n\n    dom.bind(this.__input, 'keyup', onChange);\n    dom.bind(this.__input, 'change', onChange);\n    dom.bind(this.__input, 'blur', onBlur);\n    dom.bind(this.__input, 'keydown', function(e) {\n      if (e.keyCode === 13) {\n        this.blur();\n      }\n    });\n\n    this.updateDisplay();\n\n    this.domElement.appendChild(this.__input);\n  }\n\n  updateDisplay() {\n    // Stops the caret from moving on account of:\n    // keyup -> setValue -> updateDisplay\n    if (!dom.isActive(this.__input)) {\n      this.__input.value = this.getValue();\n    }\n    return super.updateDisplay();\n  }\n}\n\nexport default StringController;\n","/**\n * dat-gui JavaScript Controller Library\n * http://code.google.com/p/dat-gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport Controller from './Controller';\nimport common from '../utils/common';\n\nfunction numDecimals(x) {\n  const _x = x.toString();\n  if (_x.indexOf('.') > -1) {\n    return _x.length - _x.indexOf('.') - 1;\n  }\n\n  return 0;\n}\n\n/**\n * @class Represents a given property of an object that is a number.\n *\n * @extends dat.controllers.Controller\n *\n * @param {Object} object The object to be manipulated\n * @param {string} property The name of the property to be manipulated\n * @param {Object} [params] Optional parameters\n * @param {Number} [params.min] Minimum allowed value\n * @param {Number} [params.max] Maximum allowed value\n * @param {Number} [params.step] Increment by which to change value\n */\nclass NumberController extends Controller {\n  constructor(object, property, params) {\n    super(object, property);\n\n    const _params = params || {};\n\n    this.__min = _params.min;\n    this.__max = _params.max;\n    this.__step = _params.step;\n\n    if (common.isUndefined(this.__step)) {\n      if (this.initialValue === 0) {\n        this.__impliedStep = 1; // What are we, psychics?\n      } else {\n        // Hey Doug, check this out.\n        this.__impliedStep = Math.pow(10, Math.floor(Math.log(Math.abs(this.initialValue)) / Math.LN10)) / 10;\n      }\n    } else {\n      this.__impliedStep = this.__step;\n    }\n\n    this.__precision = numDecimals(this.__impliedStep);\n  }\n\n  setValue(v) {\n    let _v = v;\n\n    if (this.__min !== undefined && _v < this.__min) {\n      _v = this.__min;\n    } else if (this.__max !== undefined && _v > this.__max) {\n      _v = this.__max;\n    }\n\n    if (this.__step !== undefined && _v % this.__step !== 0) {\n      _v = Math.round(_v / this.__step) * this.__step;\n    }\n\n    return super.setValue(_v);\n  }\n\n  /**\n   * Specify a minimum value for <code>object[property]</code>.\n   *\n   * @param {Number} minValue The minimum value for\n   * <code>object[property]</code>\n   * @returns {dat.controllers.NumberController} this\n   */\n  min(minValue) {\n    this.__min = minValue;\n    return this;\n  }\n\n  /**\n   * Specify a maximum value for <code>object[property]</code>.\n   *\n   * @param {Number} maxValue The maximum value for\n   * <code>object[property]</code>\n   * @returns {dat.controllers.NumberController} this\n   */\n  max(maxValue) {\n    this.__max = maxValue;\n    return this;\n  }\n\n  /**\n   * Specify a step value that dat.controllers.NumberController\n   * increments by.\n   *\n   * @param {Number} stepValue The step value for\n   * dat.controllers.NumberController\n   * @default if minimum and maximum specified increment is 1% of the\n   * difference otherwise stepValue is 1\n   * @returns {dat.controllers.NumberController} this\n   */\n  step(stepValue) {\n    this.__step = stepValue;\n    this.__impliedStep = stepValue;\n    this.__precision = numDecimals(stepValue);\n    return this;\n  }\n}\n\nexport default NumberController;\n","/**\n * dat-gui JavaScript Controller Library\n * http://code.google.com/p/dat-gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport NumberController from './NumberController';\nimport dom from '../dom/dom';\nimport common from '../utils/common';\n\nfunction roundToDecimal(value, decimals) {\n  const tenTo = Math.pow(10, decimals);\n  return Math.round(value * tenTo) / tenTo;\n}\n\n/**\n * @class Represents a given property of an object that is a number and\n * provides an input element with which to manipulate it.\n *\n * @extends dat.controllers.Controller\n * @extends dat.controllers.NumberController\n *\n * @param {Object} object The object to be manipulated\n * @param {string} property The name of the property to be manipulated\n * @param {Object} [params] Optional parameters\n * @param {Number} [params.min] Minimum allowed value\n * @param {Number} [params.max] Maximum allowed value\n * @param {Number} [params.step] Increment by which to change value\n */\nclass NumberControllerBox extends NumberController {\n  constructor(object, property, params) {\n    super(object, property, params);\n\n    this.__truncationSuspended = false;\n\n    const _this = this;\n\n    /**\n     * {Number} Previous mouse y position\n     * @ignore\n     */\n    let prevY;\n\n    function onChange() {\n      const attempted = parseFloat(_this.__input.value);\n      if (!common.isNaN(attempted)) {\n        _this.setValue(attempted);\n      }\n    }\n\n    function onFinish() {\n      if (_this.__onFinishChange) {\n        _this.__onFinishChange.call(_this, _this.getValue());\n      }\n    }\n\n    function onBlur() {\n      onFinish();\n    }\n\n    function onMouseDrag(e) {\n      const diff = prevY - e.clientY;\n      _this.setValue(_this.getValue() + diff * _this.__impliedStep);\n\n      prevY = e.clientY;\n    }\n\n    function onMouseUp() {\n      dom.unbind(window, 'mousemove', onMouseDrag);\n      dom.unbind(window, 'mouseup', onMouseUp);\n      onFinish();\n    }\n\n    function onMouseDown(e) {\n      dom.bind(window, 'mousemove', onMouseDrag);\n      dom.bind(window, 'mouseup', onMouseUp);\n      prevY = e.clientY;\n    }\n\n    this.__input = document.createElement('input');\n    this.__input.setAttribute('type', 'text');\n\n    // Makes it so manually specified values are not truncated.\n\n    dom.bind(this.__input, 'change', onChange);\n    dom.bind(this.__input, 'blur', onBlur);\n    dom.bind(this.__input, 'mousedown', onMouseDown);\n    dom.bind(this.__input, 'keydown', function(e) {\n      // When pressing enter, you can be as precise as you want.\n      if (e.keyCode === 13) {\n        _this.__truncationSuspended = true;\n        this.blur();\n        _this.__truncationSuspended = false;\n        onFinish();\n      }\n    });\n\n    this.updateDisplay();\n\n    this.domElement.appendChild(this.__input);\n  }\n\n  updateDisplay() {\n    this.__input.value = this.__truncationSuspended ? this.getValue() : roundToDecimal(this.getValue(), this.__precision);\n    return super.updateDisplay();\n  }\n}\n\nexport default NumberControllerBox;\n","/**\n * dat-gui JavaScript Controller Library\n * http://code.google.com/p/dat-gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport NumberController from './NumberController';\nimport dom from '../dom/dom';\n\nfunction map(v, i1, i2, o1, o2) {\n  return o1 + (o2 - o1) * ((v - i1) / (i2 - i1));\n}\n\n/**\n * @class Represents a given property of an object that is a number, contains\n * a minimum and maximum, and provides a slider element with which to\n * manipulate it. It should be noted that the slider element is made up of\n * <code>&lt;div&gt;</code> tags, <strong>not</strong> the html5\n * <code>&lt;slider&gt;</code> element.\n *\n * @extends dat.controllers.Controller\n * @extends dat.controllers.NumberController\n *\n * @param {Object} object The object to be manipulated\n * @param {string} property The name of the property to be manipulated\n * @param {Number} minValue Minimum allowed value\n * @param {Number} maxValue Maximum allowed value\n * @param {Number} stepValue Increment by which to change value\n */\nclass NumberControllerSlider extends NumberController {\n  constructor(object, property, min, max, step) {\n    super(object, property, { min: min, max: max, step: step });\n\n    const _this = this;\n\n    this.__background = document.createElement('div');\n    this.__foreground = document.createElement('div');\n\n    dom.bind(this.__background, 'mousedown', onMouseDown);\n    dom.bind(this.__background, 'touchstart', onTouchStart);\n\n    dom.addClass(this.__background, 'slider');\n    dom.addClass(this.__foreground, 'slider-fg');\n\n    function onMouseDown(e) {\n      document.activeElement.blur();\n\n      dom.bind(window, 'mousemove', onMouseDrag);\n      dom.bind(window, 'mouseup', onMouseUp);\n\n      onMouseDrag(e);\n    }\n\n    function onMouseDrag(e) {\n      e.preventDefault();\n\n      const bgRect = _this.__background.getBoundingClientRect();\n\n      _this.setValue(\n        map(e.clientX, bgRect.left, bgRect.right, _this.__min, _this.__max)\n      );\n\n      return false;\n    }\n\n    function onMouseUp() {\n      dom.unbind(window, 'mousemove', onMouseDrag);\n      dom.unbind(window, 'mouseup', onMouseUp);\n      if (_this.__onFinishChange) {\n        _this.__onFinishChange.call(_this, _this.getValue());\n      }\n    }\n\n    function onTouchStart(e) {\n      if (e.touches.length !== 1) { return; }\n      dom.bind(window, 'touchmove', onTouchMove);\n      dom.bind(window, 'touchend', onTouchEnd);\n      onTouchMove(e);\n    }\n\n    function onTouchMove(e) {\n      const clientX = e.touches[0].clientX;\n      const bgRect = _this.__background.getBoundingClientRect();\n\n      _this.setValue(\n        map(clientX, bgRect.left, bgRect.right, _this.__min, _this.__max)\n      );\n    }\n\n    function onTouchEnd() {\n      dom.unbind(window, 'touchmove', onTouchMove);\n      dom.unbind(window, 'touchend', onTouchEnd);\n      if (_this.__onFinishChange) {\n        _this.__onFinishChange.call(_this, _this.getValue());\n      }\n    }\n\n    this.updateDisplay();\n\n    this.__background.appendChild(this.__foreground);\n    this.domElement.appendChild(this.__background);\n  }\n\n  updateDisplay() {\n    const pct = (this.getValue() - this.__min) / (this.__max - this.__min);\n    this.__foreground.style.width = pct * 100 + '%';\n    return super.updateDisplay();\n  }\n}\n\nexport default NumberControllerSlider;\n","/**\n * dat-gui JavaScript Controller Library\n * http://code.google.com/p/dat-gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport Controller from './Controller';\nimport dom from '../dom/dom';\n\n/**\n * @class Provides a GUI interface to fire a specified method, a property of an object.\n *\n * @extends dat.controllers.Controller\n *\n * @param {Object} object The object to be manipulated\n * @param {string} property The name of the property to be manipulated\n */\nclass FunctionController extends Controller {\n  constructor(object, property, text) {\n    super(object, property);\n\n    const _this = this;\n\n    this.__button = document.createElement('div');\n    this.__button.innerHTML = text === undefined ? 'Fire' : text;\n\n    dom.bind(this.__button, 'click', function(e) {\n      e.preventDefault();\n      _this.fire();\n      return false;\n    });\n\n    dom.addClass(this.__button, 'button');\n\n    this.domElement.appendChild(this.__button);\n  }\n\n  fire() {\n    if (this.__onChange) {\n      this.__onChange.call(this);\n    }\n    this.getValue().call(this.object);\n    if (this.__onFinishChange) {\n      this.__onFinishChange.call(this, this.getValue());\n    }\n  }\n}\n\nexport default FunctionController;\n","/**\n * dat-gui JavaScript Controller Library\n * http://code.google.com/p/dat-gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport Controller from './Controller';\nimport dom from '../dom/dom';\nimport Color from '../color/Color';\nimport interpret from '../color/interpret';\nimport common from '../utils/common';\n\n/**\n * @class Represents a given property of an object that is a color.\n * @param {Object} object\n * @param {string} property\n */\nclass ColorController extends Controller {\n  constructor(object, property) {\n    super(object, property);\n\n    this.__color = new Color(this.getValue());\n    this.__temp = new Color(0);\n\n    const _this = this;\n\n    this.domElement = document.createElement('div');\n\n    dom.makeSelectable(this.domElement, false);\n\n    this.__selector = document.createElement('div');\n    this.__selector.className = 'selector';\n\n    this.__saturation_field = document.createElement('div');\n    this.__saturation_field.className = 'saturation-field';\n\n    this.__field_knob = document.createElement('div');\n    this.__field_knob.className = 'field-knob';\n    this.__field_knob_border = '2px solid ';\n\n    this.__hue_knob = document.createElement('div');\n    this.__hue_knob.className = 'hue-knob';\n\n    this.__hue_field = document.createElement('div');\n    this.__hue_field.className = 'hue-field';\n\n    this.__input = document.createElement('input');\n    this.__input.type = 'text';\n    this.__input_textShadow = '0 1px 1px ';\n\n    dom.bind(this.__input, 'keydown', function(e) {\n      if (e.keyCode === 13) { // on enter\n        onBlur.call(this);\n      }\n    });\n\n    dom.bind(this.__input, 'blur', onBlur);\n\n    dom.bind(this.__selector, 'mousedown', function(/* e */) {\n      dom\n        .addClass(this, 'drag')\n        .bind(window, 'mouseup', function(/* e */) {\n          dom.removeClass(_this.__selector, 'drag');\n        });\n    });\n\n    dom.bind(this.__selector, 'touchstart', function(/* e */) {\n      dom\n        .addClass(this, 'drag')\n        .bind(window, 'touchend', function(/* e */) {\n          dom.removeClass(_this.__selector, 'drag');\n        });\n    });\n\n    const valueField = document.createElement('div');\n\n    common.extend(this.__selector.style, {\n      width: '122px',\n      height: '102px',\n      padding: '3px',\n      backgroundColor: '#222',\n      boxShadow: '0px 1px 3px rgba(0,0,0,0.3)'\n    });\n\n    common.extend(this.__field_knob.style, {\n      position: 'absolute',\n      width: '12px',\n      height: '12px',\n      border: this.__field_knob_border + (this.__color.v < 0.5 ? '#fff' : '#000'),\n      boxShadow: '0px 1px 3px rgba(0,0,0,0.5)',\n      borderRadius: '12px',\n      zIndex: 1\n    });\n\n    common.extend(this.__hue_knob.style, {\n      position: 'absolute',\n      width: '15px',\n      height: '2px',\n      borderRight: '4px solid #fff',\n      zIndex: 1\n    });\n\n    common.extend(this.__saturation_field.style, {\n      width: '100px',\n      height: '100px',\n      border: '1px solid #555',\n      marginRight: '3px',\n      display: 'inline-block',\n      cursor: 'pointer'\n    });\n\n    common.extend(valueField.style, {\n      width: '100%',\n      height: '100%',\n      background: 'none'\n    });\n\n    linearGradient(valueField, 'top', 'rgba(0,0,0,0)', '#000');\n\n    common.extend(this.__hue_field.style, {\n      width: '15px',\n      height: '100px',\n      border: '1px solid #555',\n      cursor: 'ns-resize',\n      position: 'absolute',\n      top: '3px',\n      right: '3px'\n    });\n\n    hueGradient(this.__hue_field);\n\n    common.extend(this.__input.style, {\n      outline: 'none',\n//      width: '120px',\n      textAlign: 'center',\n//      padding: '4px',\n//      marginBottom: '6px',\n      color: '#fff',\n      border: 0,\n      fontWeight: 'bold',\n      textShadow: this.__input_textShadow + 'rgba(0,0,0,0.7)'\n    });\n\n    dom.bind(this.__saturation_field, 'mousedown', fieldDown);\n    dom.bind(this.__saturation_field, 'touchstart', fieldDown);\n\n    dom.bind(this.__field_knob, 'mousedown', fieldDown);\n    dom.bind(this.__field_knob, 'touchstart', fieldDown);\n\n    dom.bind(this.__hue_field, 'mousedown', fieldDownH);\n    dom.bind(this.__hue_field, 'touchstart', fieldDownH);\n\n    function fieldDown(e) {\n      setSV(e);\n      dom.bind(window, 'mousemove', setSV);\n      dom.bind(window, 'touchmove', setSV);\n      dom.bind(window, 'mouseup', fieldUpSV);\n      dom.bind(window, 'touchend', fieldUpSV);\n    }\n\n    function fieldDownH(e) {\n      setH(e);\n      dom.bind(window, 'mousemove', setH);\n      dom.bind(window, 'touchmove', setH);\n      dom.bind(window, 'mouseup', fieldUpH);\n      dom.bind(window, 'touchend', fieldUpH);\n    }\n\n    function fieldUpSV() {\n      dom.unbind(window, 'mousemove', setSV);\n      dom.unbind(window, 'touchmove', setSV);\n      dom.unbind(window, 'mouseup', fieldUpSV);\n      dom.unbind(window, 'touchend', fieldUpSV);\n      onFinish();\n    }\n\n    function fieldUpH() {\n      dom.unbind(window, 'mousemove', setH);\n      dom.unbind(window, 'touchmove', setH);\n      dom.unbind(window, 'mouseup', fieldUpH);\n      dom.unbind(window, 'touchend', fieldUpH);\n      onFinish();\n    }\n\n    function onBlur() {\n      const i = interpret(this.value);\n      if (i !== false) {\n        _this.__color.__state = i;\n        _this.setValue(_this.__color.toOriginal());\n      } else {\n        this.value = _this.__color.toString();\n      }\n    }\n\n    function onFinish() {\n      if (_this.__onFinishChange) {\n        _this.__onFinishChange.call(_this, _this.__color.toOriginal());\n      }\n    }\n\n    this.__saturation_field.appendChild(valueField);\n    this.__selector.appendChild(this.__field_knob);\n    this.__selector.appendChild(this.__saturation_field);\n    this.__selector.appendChild(this.__hue_field);\n    this.__hue_field.appendChild(this.__hue_knob);\n\n    this.domElement.appendChild(this.__input);\n    this.domElement.appendChild(this.__selector);\n\n    this.updateDisplay();\n\n    function setSV(e) {\n      if (e.type.indexOf('touch') === -1) { e.preventDefault(); }\n\n      const fieldRect = _this.__saturation_field.getBoundingClientRect();\n      const { clientX, clientY } = (e.touches && e.touches[0]) || e;\n      let s = (clientX - fieldRect.left) / (fieldRect.right - fieldRect.left);\n      let v = 1 - (clientY - fieldRect.top) / (fieldRect.bottom - fieldRect.top);\n\n      if (v > 1) {\n        v = 1;\n      } else if (v < 0) {\n        v = 0;\n      }\n\n      if (s > 1) {\n        s = 1;\n      } else if (s < 0) {\n        s = 0;\n      }\n\n      _this.__color.v = v;\n      _this.__color.s = s;\n\n      _this.setValue(_this.__color.toOriginal());\n\n\n      return false;\n    }\n\n    function setH(e) {\n      if (e.type.indexOf('touch') === -1) { e.preventDefault(); }\n\n      const fieldRect = _this.__hue_field.getBoundingClientRect();\n      const { clientY } = (e.touches && e.touches[0]) || e;\n      let h = 1 - (clientY - fieldRect.top) / (fieldRect.bottom - fieldRect.top);\n\n      if (h > 1) {\n        h = 1;\n      } else if (h < 0) {\n        h = 0;\n      }\n\n      _this.__color.h = h * 360;\n\n      _this.setValue(_this.__color.toOriginal());\n\n      return false;\n    }\n  }\n\n  updateDisplay() {\n    const i = interpret(this.getValue());\n\n    if (i !== false) {\n      let mismatch = false;\n\n      // Check for mismatch on the interpreted value.\n\n      common.each(Color.COMPONENTS, function(component) {\n        if (!common.isUndefined(i[component]) && !common.isUndefined(this.__color.__state[component]) &&\n          i[component] !== this.__color.__state[component]) {\n          mismatch = true;\n          return {}; // break\n        }\n      }, this);\n\n      // If nothing diverges, we keep our previous values\n      // for statefulness, otherwise we recalculate fresh\n      if (mismatch) {\n        common.extend(this.__color.__state, i);\n      }\n    }\n\n    common.extend(this.__temp.__state, this.__color.__state);\n\n    this.__temp.a = 1;\n\n    const flip = (this.__color.v < 0.5 || this.__color.s > 0.5) ? 255 : 0;\n    const _flip = 255 - flip;\n\n    common.extend(this.__field_knob.style, {\n      marginLeft: 100 * this.__color.s - 7 + 'px',\n      marginTop: 100 * (1 - this.__color.v) - 7 + 'px',\n      backgroundColor: this.__temp.toHexString(),\n      border: this.__field_knob_border + 'rgb(' + flip + ',' + flip + ',' + flip + ')'\n    });\n\n    this.__hue_knob.style.marginTop = (1 - this.__color.h / 360) * 100 + 'px';\n\n    this.__temp.s = 1;\n    this.__temp.v = 1;\n\n    linearGradient(this.__saturation_field, 'left', '#fff', this.__temp.toHexString());\n\n    this.__input.value = this.__color.toString();\n\n    common.extend(this.__input.style, {\n      backgroundColor: this.__color.toHexString(),\n      color: 'rgb(' + flip + ',' + flip + ',' + flip + ')',\n      textShadow: this.__input_textShadow + 'rgba(' + _flip + ',' + _flip + ',' + _flip + ',.7)'\n    });\n  }\n}\n\nconst vendors = ['-moz-', '-o-', '-webkit-', '-ms-', ''];\n\nfunction linearGradient(elem, x, a, b) {\n  elem.style.background = '';\n  common.each(vendors, function(vendor) {\n    elem.style.cssText += 'background: ' + vendor + 'linear-gradient(' + x + ', ' + a + ' 0%, ' + b + ' 100%); ';\n  });\n}\n\nfunction hueGradient(elem) {\n  elem.style.background = '';\n  elem.style.cssText += 'background: -moz-linear-gradient(top,  #ff0000 0%, #ff00ff 17%, #0000ff 34%, #00ffff 50%, #00ff00 67%, #ffff00 84%, #ff0000 100%);';\n  elem.style.cssText += 'background: -webkit-linear-gradient(top,  #ff0000 0%,#ff00ff 17%,#0000ff 34%,#00ffff 50%,#00ff00 67%,#ffff00 84%,#ff0000 100%);';\n  elem.style.cssText += 'background: -o-linear-gradient(top,  #ff0000 0%,#ff00ff 17%,#0000ff 34%,#00ffff 50%,#00ff00 67%,#ffff00 84%,#ff0000 100%);';\n  elem.style.cssText += 'background: -ms-linear-gradient(top,  #ff0000 0%,#ff00ff 17%,#0000ff 34%,#00ffff 50%,#00ff00 67%,#ffff00 84%,#ff0000 100%);';\n  elem.style.cssText += 'background: linear-gradient(top,  #ff0000 0%,#ff00ff 17%,#0000ff 34%,#00ffff 50%,#00ff00 67%,#ffff00 84%,#ff0000 100%);';\n}\n\nexport default ColorController;\n","/**\n * dat-gui JavaScript Controller Library\n * http://code.google.com/p/dat-gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nconst css = {\n  load: function(url, indoc) {\n    const doc = indoc || document;\n    const link = doc.createElement('link');\n    link.type = 'text/css';\n    link.rel = 'stylesheet';\n    link.href = url;\n    doc.getElementsByTagName('head')[0].appendChild(link);\n  },\n\n  inject: function(cssContent, indoc) {\n    const doc = indoc || document;\n    const injected = document.createElement('style');\n    injected.type = 'text/css';\n    injected.innerHTML = cssContent;\n    const head = doc.getElementsByTagName('head')[0];\n    try {\n      head.appendChild(injected);\n    } catch (e) { // Unable to inject CSS, probably because of a Content Security Policy\n    }\n  }\n};\n\nexport default css;\n","const saveDialogContents = `<div id=\"dg-save\" class=\"dg dialogue\">\n\n  Here's the new load parameter for your <code>GUI</code>'s constructor:\n\n  <textarea id=\"dg-new-constructor\"></textarea>\n\n  <div id=\"dg-save-locally\">\n\n    <input id=\"dg-local-storage\" type=\"checkbox\"/> Automatically save\n    values to <code>localStorage</code> on exit.\n\n    <div id=\"dg-local-explain\">The values saved to <code>localStorage</code> will\n      override those passed to <code>dat.GUI</code>'s constructor. This makes it\n      easier to work incrementally, but <code>localStorage</code> is fragile,\n      and your friends may not see the same values you do.\n\n    </div>\n\n  </div>\n\n</div>`;\n\nexport default saveDialogContents;\n","/**\n * dat-gui JavaScript Controller Library\n * http://code.google.com/p/dat-gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport OptionController from './OptionController';\nimport NumberControllerBox from './NumberControllerBox';\nimport NumberControllerSlider from './NumberControllerSlider';\nimport StringController from './StringController';\nimport FunctionController from './FunctionController';\nimport BooleanController from './BooleanController';\nimport common from '../utils/common';\n\nconst ControllerFactory = function(object, property) {\n  const initialValue = object[property];\n\n  // Providing options?\n  if (common.isArray(arguments[2]) || common.isObject(arguments[2])) {\n    return new OptionController(object, property, arguments[2]);\n  }\n\n  // Providing a map?\n  if (common.isNumber(initialValue)) {\n    // Has min and max? (slider)\n    if (common.isNumber(arguments[2]) && common.isNumber(arguments[3])) {\n      // has step?\n      if (common.isNumber(arguments[4])) {\n        return new NumberControllerSlider(object, property,\n                        arguments[2], arguments[3], arguments[4]);\n      }\n\n      return new NumberControllerSlider(object, property, arguments[2], arguments[3]);\n    }\n\n    // number box\n    if (common.isNumber(arguments[4])) { // has step\n      return new NumberControllerBox(object, property,\n                        { min: arguments[2], max: arguments[3], step: arguments[4] });\n    }\n    return new NumberControllerBox(object, property, { min: arguments[2], max: arguments[3] });\n  }\n\n  if (common.isString(initialValue)) {\n    return new StringController(object, property);\n  }\n\n  if (common.isFunction(initialValue)) {\n    return new FunctionController(object, property, '');\n  }\n\n  if (common.isBoolean(initialValue)) {\n    return new BooleanController(object, property);\n  }\n\n  return null;\n};\n\nexport default ControllerFactory;\n","/**\n * dat-gui JavaScript Controller Library\n * http://code.google.com/p/dat-gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction requestAnimationFrame(callback) {\n  setTimeout(callback, 1000 / 60);\n}\n\nexport default window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    requestAnimationFrame;\n","/**\n * dat-gui JavaScript Controller Library\n * http://code.google.com/p/dat-gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport dom from '../dom/dom';\nimport common from '../utils/common';\n\nclass CenteredDiv {\n  constructor() {\n    this.backgroundElement = document.createElement('div');\n    common.extend(this.backgroundElement.style, {\n      backgroundColor: 'rgba(0,0,0,0.8)',\n      top: 0,\n      left: 0,\n      display: 'none',\n      zIndex: '1000',\n      opacity: 0,\n      WebkitTransition: 'opacity 0.2s linear',\n      transition: 'opacity 0.2s linear'\n    });\n\n    dom.makeFullscreen(this.backgroundElement);\n    this.backgroundElement.style.position = 'fixed';\n\n    this.domElement = document.createElement('div');\n    common.extend(this.domElement.style, {\n      position: 'fixed',\n      display: 'none',\n      zIndex: '1001',\n      opacity: 0,\n      WebkitTransition: '-webkit-transform 0.2s ease-out, opacity 0.2s linear',\n      transition: 'transform 0.2s ease-out, opacity 0.2s linear'\n    });\n\n\n    document.body.appendChild(this.backgroundElement);\n    document.body.appendChild(this.domElement);\n\n    const _this = this;\n    dom.bind(this.backgroundElement, 'click', function() {\n      _this.hide();\n    });\n  }\n\n  show() {\n    const _this = this;\n\n    this.backgroundElement.style.display = 'block';\n\n    this.domElement.style.display = 'block';\n    this.domElement.style.opacity = 0;\n//    this.domElement.style.top = '52%';\n    this.domElement.style.webkitTransform = 'scale(1.1)';\n\n    this.layout();\n\n    common.defer(function() {\n      _this.backgroundElement.style.opacity = 1;\n      _this.domElement.style.opacity = 1;\n      _this.domElement.style.webkitTransform = 'scale(1)';\n    });\n  }\n\n  /**\n   * Hide centered div\n   */\n  hide() {\n    const _this = this;\n\n    const hide = function() {\n      _this.domElement.style.display = 'none';\n      _this.backgroundElement.style.display = 'none';\n\n      dom.unbind(_this.domElement, 'webkitTransitionEnd', hide);\n      dom.unbind(_this.domElement, 'transitionend', hide);\n      dom.unbind(_this.domElement, 'oTransitionEnd', hide);\n    };\n\n    dom.bind(this.domElement, 'webkitTransitionEnd', hide);\n    dom.bind(this.domElement, 'transitionend', hide);\n    dom.bind(this.domElement, 'oTransitionEnd', hide);\n\n    this.backgroundElement.style.opacity = 0;\n//    this.domElement.style.top = '48%';\n    this.domElement.style.opacity = 0;\n    this.domElement.style.webkitTransform = 'scale(1.1)';\n  }\n\n  layout() {\n    this.domElement.style.left = window.innerWidth / 2 - dom.getWidth(this.domElement) / 2 + 'px';\n    this.domElement.style.top = window.innerHeight / 2 - dom.getHeight(this.domElement) / 2 + 'px';\n  }\n}\n\nexport default CenteredDiv;\n","/**\n * dat-gui JavaScript Controller Library\n * http://code.google.com/p/dat-gui\n *\n * Copyright 2011 Data Arts Team, Google Creative Lab\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nimport css from '../utils/css';\nimport saveDialogueContents from './saveDialogue.html';\nimport ControllerFactory from '../controllers/ControllerFactory';\nimport Controller from '../controllers/Controller';\nimport BooleanController from '../controllers/BooleanController';\nimport FunctionController from '../controllers/FunctionController';\nimport NumberControllerBox from '../controllers/NumberControllerBox';\nimport NumberControllerSlider from '../controllers/NumberControllerSlider';\nimport ColorController from '../controllers/ColorController';\nimport requestAnimationFrame from '../utils/requestAnimationFrame';\nimport CenteredDiv from '../dom/CenteredDiv';\nimport dom from '../dom/dom';\nimport common from '../utils/common';\n\nimport styleSheet from './style.scss'; // CSS to embed in build\n\ncss.inject(styleSheet);\n\n/** @ignore Outer-most className for GUI's */\nconst CSS_NAMESPACE = 'dg';\n\nconst HIDE_KEY_CODE = 72;\n\n/** @ignore The only value shared between the JS and SCSS. Use caution. */\nconst CLOSE_BUTTON_HEIGHT = 20;\n\nconst DEFAULT_DEFAULT_PRESET_NAME = 'Default';\n\nconst SUPPORTS_LOCAL_STORAGE = (function() {\n  try {\n    return !!window.localStorage;\n  } catch (e) {\n    return false;\n  }\n}());\n\nlet SAVE_DIALOGUE;\n\n/** @ignore Have we yet to create an autoPlace GUI? */\nlet autoPlaceVirgin = true;\n\n/** @ignore Fixed position div that auto place GUI's go inside */\nlet autoPlaceContainer;\n\n/** @ignore Are we hiding the GUI's ? */\nlet hide = false;\n\n/** @private GUI's which should be hidden */\nconst hideableGuis = [];\n\n/**\n * @class A lightweight controller library for JavaScript. It allows you to easily\n * manipulate variables and fire functions on the fly.\n *\n * @typicalname gui\n *\n * @example\n * // Creating a GUI with options.\n * var gui = new dat.GUI({name: 'My GUI'});\n *\n * @example\n * // Creating a GUI and a subfolder.\n * var gui = new dat.GUI();\n * var folder1 = gui.addFolder('Flow Field');\n *\n * @param {Object} [params]\n * @param {String} [params.name] The name of this GUI.\n * @param {Object} [params.load] JSON object representing the saved state of\n * this GUI.\n * @param {dat.gui.GUI} [params.parent] The GUI I'm nested in.\n * @param {Boolean} [params.autoPlace=true]\n * @param {Boolean} [params.hideable=true] If true, GUI is shown/hidden by <kbd>h</kbd> keypress.\n * @param {Boolean} [params.closed=false] If true, starts closed\n * @param {Boolean} [params.closeOnTop=false] If true, close/open button shows on top of the GUI\n */\nconst GUI = function(pars) {\n  const _this = this;\n\n  let params = pars || {};\n\n  /**\n   * Outermost DOM Element\n   * @type {DOMElement}\n   */\n  this.domElement = document.createElement('div');\n  this.__ul = document.createElement('ul');\n  this.domElement.appendChild(this.__ul);\n\n  dom.addClass(this.domElement, CSS_NAMESPACE);\n\n  /**\n   * Nested GUI's by name\n   * @ignore\n   */\n  this.__folders = {};\n\n  this.__controllers = [];\n\n  /**\n   * List of objects I'm remembering for save, only used in top level GUI\n   * @ignore\n   */\n  this.__rememberedObjects = [];\n\n  /**\n   * Maps the index of remembered objects to a map of controllers, only used\n   * in top level GUI.\n   *\n   * @private\n   * @ignore\n   *\n   * @example\n   * [\n   *  {\n     *    propertyName: Controller,\n     *    anotherPropertyName: Controller\n     *  },\n   *  {\n     *    propertyName: Controller\n     *  }\n   * ]\n   */\n  this.__rememberedObjectIndecesToControllers = [];\n\n  this.__listening = [];\n\n  // Default parameters\n  params = common.defaults(params, {\n    closeOnTop: false,\n    autoPlace: true,\n    width: GUI.DEFAULT_WIDTH\n  });\n\n  params = common.defaults(params, {\n    resizable: params.autoPlace,\n    hideable: params.autoPlace\n  });\n\n  if (!common.isUndefined(params.load)) {\n    // Explicit preset\n    if (params.preset) {\n      params.load.preset = params.preset;\n    }\n  } else {\n    params.load = { preset: DEFAULT_DEFAULT_PRESET_NAME };\n  }\n\n  if (common.isUndefined(params.parent) && params.hideable) {\n    hideableGuis.push(this);\n  }\n\n  // Only root level GUI's are resizable.\n  params.resizable = common.isUndefined(params.parent) && params.resizable;\n\n  if (params.autoPlace && common.isUndefined(params.scrollable)) {\n    params.scrollable = true;\n  }\n//    params.scrollable = common.isUndefined(params.parent) && params.scrollable === true;\n\n  // Not part of params because I don't want people passing this in via\n  // constructor. Should be a 'remembered' value.\n  let useLocalStorage =\n    SUPPORTS_LOCAL_STORAGE &&\n    localStorage.getItem(getLocalStorageHash(this, 'isLocal')) === 'true';\n\n  let saveToLocalStorage;\n  let titleRow;\n\n  Object.defineProperties(this,\n    /** @lends GUI.prototype */\n    {\n      /**\n       * The parent <code>GUI</code>\n       * @type dat.gui.GUI\n       */\n      parent: {\n        get: function() {\n          return params.parent;\n        }\n      },\n\n      scrollable: {\n        get: function() {\n          return params.scrollable;\n        }\n      },\n\n      /**\n       * Handles <code>GUI</code>'s element placement for you\n       * @type Boolean\n       */\n      autoPlace: {\n        get: function() {\n          return params.autoPlace;\n        }\n      },\n\n      /**\n       * Handles <code>GUI</code>'s position of open/close button\n       * @type Boolean\n       */\n      closeOnTop: {\n        get: function() {\n          return params.closeOnTop;\n        }\n      },\n\n      /**\n       * The identifier for a set of saved values\n       * @type String\n       */\n      preset: {\n        get: function() {\n          if (_this.parent) {\n            return _this.getRoot().preset;\n          }\n\n          return params.load.preset;\n        },\n\n        set: function(v) {\n          if (_this.parent) {\n            _this.getRoot().preset = v;\n          } else {\n            params.load.preset = v;\n          }\n          setPresetSelectIndex(this);\n          _this.revert();\n        }\n      },\n\n      /**\n       * The width of <code>GUI</code> element\n       * @type Number\n       */\n      width: {\n        get: function() {\n          return params.width;\n        },\n        set: function(v) {\n          params.width = v;\n          setWidth(_this, v);\n        }\n      },\n\n      /**\n       * The name of <code>GUI</code>. Used for folders. i.e\n       * a folder's name\n       * @type String\n       */\n      name: {\n        get: function() {\n          return params.name;\n        },\n        set: function(v) {\n          // TODO Check for collisions among sibling folders\n          params.name = v;\n          if (titleRow) {\n            titleRow.innerHTML = params.name;\n          }\n        }\n      },\n\n      /**\n       * Whether the <code>GUI</code> is collapsed or not\n       * @type Boolean\n       */\n      closed: {\n        get: function() {\n          return params.closed;\n        },\n        set: function(v) {\n          params.closed = v;\n          if (params.closed) {\n            dom.addClass(_this.__ul, GUI.CLASS_CLOSED);\n          } else {\n            dom.removeClass(_this.__ul, GUI.CLASS_CLOSED);\n          }\n          // For browsers that aren't going to respect the CSS transition,\n          // Lets just check our height against the window height right off\n          // the bat.\n          this.onResize();\n\n          if (_this.__closeButton) {\n            _this.__closeButton.innerHTML = v ? GUI.TEXT_OPEN : GUI.TEXT_CLOSED;\n          }\n        }\n      },\n\n      /**\n       * Contains all presets\n       * @type Object\n       */\n      load: {\n        get: function() {\n          return params.load;\n        }\n      },\n\n      /**\n       * Determines whether or not to use <a href=\"https://developer.mozilla.org/en/DOM/Storage#localStorage\">localStorage</a> as the means for\n       * <code>remember</code>ing\n       * @type Boolean\n       */\n      useLocalStorage: {\n\n        get: function() {\n          return useLocalStorage;\n        },\n        set: function(bool) {\n          if (SUPPORTS_LOCAL_STORAGE) {\n            useLocalStorage = bool;\n            if (bool) {\n              dom.bind(window, 'unload', saveToLocalStorage);\n            } else {\n              dom.unbind(window, 'unload', saveToLocalStorage);\n            }\n            localStorage.setItem(getLocalStorageHash(_this, 'isLocal'), bool);\n          }\n        }\n      }\n    });\n\n  // Are we a root level GUI?\n  if (common.isUndefined(params.parent)) {\n    this.closed = params.closed || false;\n\n    dom.addClass(this.domElement, GUI.CLASS_MAIN);\n    dom.makeSelectable(this.domElement, false);\n\n    // Are we supposed to be loading locally?\n    if (SUPPORTS_LOCAL_STORAGE) {\n      if (useLocalStorage) {\n        _this.useLocalStorage = true;\n\n        const savedGui = localStorage.getItem(getLocalStorageHash(this, 'gui'));\n\n        if (savedGui) {\n          params.load = JSON.parse(savedGui);\n        }\n      }\n    }\n\n    this.__closeButton = document.createElement('div');\n    this.__closeButton.innerHTML = GUI.TEXT_CLOSED;\n    dom.addClass(this.__closeButton, GUI.CLASS_CLOSE_BUTTON);\n    if (params.closeOnTop) {\n      dom.addClass(this.__closeButton, GUI.CLASS_CLOSE_TOP);\n      this.domElement.insertBefore(this.__closeButton, this.domElement.childNodes[0]);\n    } else {\n      dom.addClass(this.__closeButton, GUI.CLASS_CLOSE_BOTTOM);\n      this.domElement.appendChild(this.__closeButton);\n    }\n\n    dom.bind(this.__closeButton, 'click', function() {\n      _this.closed = !_this.closed;\n    });\n    // Oh, you're a nested GUI!\n  } else {\n    if (params.closed === undefined) {\n      params.closed = true;\n    }\n\n    const titleRowName = document.createTextNode(params.name);\n    dom.addClass(titleRowName, 'controller-name');\n\n    titleRow = addRow(_this, titleRowName);\n\n    const onClickTitle = function(e) {\n      e.preventDefault();\n      _this.closed = !_this.closed;\n      return false;\n    };\n\n    dom.addClass(this.__ul, GUI.CLASS_CLOSED);\n\n    dom.addClass(titleRow, 'title');\n    dom.bind(titleRow, 'click', onClickTitle);\n\n    if (!params.closed) {\n      this.closed = false;\n    }\n  }\n\n  if (params.autoPlace) {\n    if (common.isUndefined(params.parent)) {\n      if (autoPlaceVirgin) {\n        autoPlaceContainer = document.createElement('div');\n        dom.addClass(autoPlaceContainer, CSS_NAMESPACE);\n        dom.addClass(autoPlaceContainer, GUI.CLASS_AUTO_PLACE_CONTAINER);\n        document.body.appendChild(autoPlaceContainer);\n        autoPlaceVirgin = false;\n      }\n\n      // Put it in the dom for you.\n      autoPlaceContainer.appendChild(this.domElement);\n\n      // Apply the auto styles\n      dom.addClass(this.domElement, GUI.CLASS_AUTO_PLACE);\n    }\n\n\n    // Make it not elastic.\n    if (!this.parent) {\n      setWidth(_this, params.width);\n    }\n  }\n\n  this.__resizeHandler = function() {\n    _this.onResizeDebounced();\n  };\n\n  dom.bind(window, 'resize', this.__resizeHandler);\n  dom.bind(this.__ul, 'webkitTransitionEnd', this.__resizeHandler);\n  dom.bind(this.__ul, 'transitionend', this.__resizeHandler);\n  dom.bind(this.__ul, 'oTransitionEnd', this.__resizeHandler);\n  this.onResize();\n\n  if (params.resizable) {\n    addResizeHandle(this);\n  }\n\n  saveToLocalStorage = function() {\n    if (SUPPORTS_LOCAL_STORAGE && localStorage.getItem(getLocalStorageHash(_this, 'isLocal')) === 'true') {\n      localStorage.setItem(getLocalStorageHash(_this, 'gui'), JSON.stringify(_this.getSaveObject()));\n    }\n  };\n\n  // expose this method publicly\n  this.saveToLocalStorageIfPossible = saveToLocalStorage;\n\n  function resetWidth() {\n    const root = _this.getRoot();\n    root.width += 1;\n    common.defer(function() {\n      root.width -= 1;\n    });\n  }\n\n  if (!params.parent) {\n    resetWidth();\n  }\n};\n\nGUI.toggleHide = function() {\n  hide = !hide;\n  common.each(hideableGuis, function(gui) {\n    gui.domElement.style.display = hide ? 'none' : '';\n  });\n};\n\nGUI.CLASS_AUTO_PLACE = 'a';\nGUI.CLASS_AUTO_PLACE_CONTAINER = 'ac';\nGUI.CLASS_MAIN = 'main';\nGUI.CLASS_CONTROLLER_ROW = 'cr';\nGUI.CLASS_TOO_TALL = 'taller-than-window';\nGUI.CLASS_CLOSED = 'closed';\nGUI.CLASS_CLOSE_BUTTON = 'close-button';\nGUI.CLASS_CLOSE_TOP = 'close-top';\nGUI.CLASS_CLOSE_BOTTOM = 'close-bottom';\nGUI.CLASS_DRAG = 'drag';\n\nGUI.DEFAULT_WIDTH = 245;\nGUI.TEXT_CLOSED = 'Close Controls';\nGUI.TEXT_OPEN = 'Open Controls';\n\nGUI._keydownHandler = function(e) {\n  if (document.activeElement.type !== 'text' &&\n    (e.which === HIDE_KEY_CODE || e.keyCode === HIDE_KEY_CODE)) {\n    GUI.toggleHide();\n  }\n};\ndom.bind(window, 'keydown', GUI._keydownHandler, false);\n\ncommon.extend(\n  GUI.prototype,\n\n  /** @lends GUI.prototype */\n  {\n\n    /**\n     * Adds a new {@link Controller} to the GUI. The type of controller created\n     * is inferred from the initial value of <code>object[property]</code>. For\n     * color properties, see {@link addColor}.\n     *\n     * @param {Object} object The object to be manipulated\n     * @param {String} property The name of the property to be manipulated\n     * @param {Number} [min] Minimum allowed value\n     * @param {Number} [max] Maximum allowed value\n     * @param {Number} [step] Increment by which to change value\n     * @returns {Controller} The controller that was added to the GUI.\n     * @instance\n     *\n     * @example\n     * // Add a string controller.\n     * var person = {name: 'Sam'};\n     * gui.add(person, 'name');\n     *\n     * @example\n     * // Add a number controller slider.\n     * var person = {age: 45};\n     * gui.add(person, 'age', 0, 100);\n     */\n    add: function(object, property) {\n      return add(\n        this,\n        object,\n        property,\n        {\n          factoryArgs: Array.prototype.slice.call(arguments, 2)\n        }\n      );\n    },\n\n    /**\n     * Adds a new color controller to the GUI.\n     *\n     * @param object\n     * @param property\n     * @returns {Controller} The controller that was added to the GUI.\n     * @instance\n     *\n     * @example\n     * var palette = {\n     *   color1: '#FF0000', // CSS string\n     *   color2: [ 0, 128, 255 ], // RGB array\n     *   color3: [ 0, 128, 255, 0.3 ], // RGB with alpha\n     *   color4: { h: 350, s: 0.9, v: 0.3 } // Hue, saturation, value\n     * };\n     * gui.addColor(palette, 'color1');\n     * gui.addColor(palette, 'color2');\n     * gui.addColor(palette, 'color3');\n     * gui.addColor(palette, 'color4');\n     */\n    addColor: function(object, property) {\n      return add(\n        this,\n        object,\n        property,\n        {\n          color: true\n        }\n      );\n    },\n\n    /**\n     * Removes the given controller from the GUI.\n     * @param {Controller} controller\n     * @instance\n     */\n    remove: function(controller) {\n      // TODO listening?\n      this.__ul.removeChild(controller.__li);\n      this.__controllers.splice(this.__controllers.indexOf(controller), 1);\n      const _this = this;\n      common.defer(function() {\n        _this.onResize();\n      });\n    },\n\n    /**\n     * Removes the root GUI from the document and unbinds all event listeners.\n     * For subfolders, use `gui.removeFolder(folder)` instead.\n     * @instance\n     */\n    destroy: function() {\n      if (this.parent) {\n        throw new Error(\n          'Only the root GUI should be removed with .destroy(). ' +\n          'For subfolders, use gui.removeFolder(folder) instead.'\n        );\n      }\n\n      if (this.autoPlace) {\n        autoPlaceContainer.removeChild(this.domElement);\n      }\n\n      const _this = this;\n      common.each(this.__folders, function(subfolder) {\n        _this.removeFolder(subfolder);\n      });\n\n      dom.unbind(window, 'keydown', GUI._keydownHandler, false);\n\n      removeListeners(this);\n    },\n\n    /**\n     * Creates a new subfolder GUI instance.\n     * @param name\n     * @returns {dat.gui.GUI} The new folder.\n     * @throws {Error} if this GUI already has a folder by the specified\n     * name\n     * @instance\n     */\n    addFolder: function(name) {\n      // We have to prevent collisions on names in order to have a key\n      // by which to remember saved values\n      if (this.__folders[name] !== undefined) {\n        throw new Error('You already have a folder in this GUI by the' +\n          ' name \"' + name + '\"');\n      }\n\n      const newGuiParams = { name: name, parent: this };\n\n      // We need to pass down the autoPlace trait so that we can\n      // attach event listeners to open/close folder actions to\n      // ensure that a scrollbar appears if the window is too short.\n      newGuiParams.autoPlace = this.autoPlace;\n\n      // Do we have saved appearance data for this folder?\n      if (this.load && // Anything loaded?\n        this.load.folders && // Was my parent a dead-end?\n        this.load.folders[name]) { // Did daddy remember me?\n        // Start me closed if I was closed\n        newGuiParams.closed = this.load.folders[name].closed;\n\n        // Pass down the loaded data\n        newGuiParams.load = this.load.folders[name];\n      }\n\n      const gui = new GUI(newGuiParams);\n      this.__folders[name] = gui;\n\n      const li = addRow(this, gui.domElement);\n      dom.addClass(li, 'folder');\n      return gui;\n    },\n\n    /**\n     * Removes a subfolder GUI instance.\n     * @param {dat.gui.GUI} folder The folder to remove.\n     * @instance\n     */\n    removeFolder: function(folder) {\n      this.__ul.removeChild(folder.domElement.parentElement);\n\n      delete this.__folders[folder.name];\n\n      // Do we have saved appearance data for this folder?\n      if (this.load && // Anything loaded?\n        this.load.folders && // Was my parent a dead-end?\n        this.load.folders[folder.name]) {\n        delete this.load.folders[folder.name];\n      }\n\n      removeListeners(folder);\n\n      const _this = this;\n\n      common.each(folder.__folders, function(subfolder) {\n        folder.removeFolder(subfolder);\n      });\n\n      common.defer(function() {\n        _this.onResize();\n      });\n    },\n\n    /**\n     * Opens the GUI.\n     */\n    open: function() {\n      this.closed = false;\n    },\n\n    /**\n     * Closes the GUI.\n     */\n    close: function() {\n      this.closed = true;\n    },\n\n    /**\n    * Hides the GUI.\n    */\n    hide: function() {\n      this.domElement.style.display = 'none';\n    },\n\n    /**\n    * Shows the GUI.\n    */\n    show: function() {\n      this.domElement.style.display = '';\n    },\n\n\n    onResize: function() {\n      // we debounce this function to prevent performance issues when rotating on tablet/mobile\n      const root = this.getRoot();\n      if (root.scrollable) {\n        const top = dom.getOffset(root.__ul).top;\n        let h = 0;\n\n        common.each(root.__ul.childNodes, function(node) {\n          if (!(root.autoPlace && node === root.__save_row)) {\n            h += dom.getHeight(node);\n          }\n        });\n\n        if (window.innerHeight - top - CLOSE_BUTTON_HEIGHT < h) {\n          dom.addClass(root.domElement, GUI.CLASS_TOO_TALL);\n          root.__ul.style.height = window.innerHeight - top - CLOSE_BUTTON_HEIGHT + 'px';\n        } else {\n          dom.removeClass(root.domElement, GUI.CLASS_TOO_TALL);\n          root.__ul.style.height = 'auto';\n        }\n      }\n\n      if (root.__resize_handle) {\n        common.defer(function() {\n          root.__resize_handle.style.height = root.__ul.offsetHeight + 'px';\n        });\n      }\n\n      if (root.__closeButton) {\n        root.__closeButton.style.width = root.width + 'px';\n      }\n    },\n\n    onResizeDebounced: common.debounce(function() { this.onResize(); }, 50),\n\n    /**\n     * Mark objects for saving. The order of these objects cannot change as\n     * the GUI grows. When remembering new objects, append them to the end\n     * of the list.\n     *\n     * @param {...Object} objects\n     * @throws {Error} if not called on a top level GUI.\n     * @instance\n     * @ignore\n     */\n    remember: function() {\n      if (common.isUndefined(SAVE_DIALOGUE)) {\n        SAVE_DIALOGUE = new CenteredDiv();\n        SAVE_DIALOGUE.domElement.innerHTML = saveDialogueContents;\n      }\n\n      if (this.parent) {\n        throw new Error('You can only call remember on a top level GUI.');\n      }\n\n      const _this = this;\n\n      common.each(Array.prototype.slice.call(arguments), function(object) {\n        if (_this.__rememberedObjects.length === 0) {\n          addSaveMenu(_this);\n        }\n        if (_this.__rememberedObjects.indexOf(object) === -1) {\n          _this.__rememberedObjects.push(object);\n        }\n      });\n\n      if (this.autoPlace) {\n        // Set save row width\n        setWidth(this, this.width);\n      }\n    },\n\n    /**\n     * @returns {dat.gui.GUI} the topmost parent GUI of a nested GUI.\n     * @instance\n     */\n    getRoot: function() {\n      let gui = this;\n      while (gui.parent) {\n        gui = gui.parent;\n      }\n      return gui;\n    },\n\n    /**\n     * @returns {Object} a JSON object representing the current state of\n     * this GUI as well as its remembered properties.\n     * @instance\n     */\n    getSaveObject: function() {\n      const toReturn = this.load;\n      toReturn.closed = this.closed;\n\n      // Am I remembering any values?\n      if (this.__rememberedObjects.length > 0) {\n        toReturn.preset = this.preset;\n\n        if (!toReturn.remembered) {\n          toReturn.remembered = {};\n        }\n\n        toReturn.remembered[this.preset] = getCurrentPreset(this);\n      }\n\n      toReturn.folders = {};\n      common.each(this.__folders, function(element, key) {\n        toReturn.folders[key] = element.getSaveObject();\n      });\n\n      return toReturn;\n    },\n\n    save: function() {\n      if (!this.load.remembered) {\n        this.load.remembered = {};\n      }\n\n      this.load.remembered[this.preset] = getCurrentPreset(this);\n      markPresetModified(this, false);\n      this.saveToLocalStorageIfPossible();\n    },\n\n    saveAs: function(presetName) {\n      if (!this.load.remembered) {\n        // Retain default values upon first save\n        this.load.remembered = {};\n        this.load.remembered[DEFAULT_DEFAULT_PRESET_NAME] = getCurrentPreset(this, true);\n      }\n\n      this.load.remembered[presetName] = getCurrentPreset(this);\n      this.preset = presetName;\n      addPresetOption(this, presetName, true);\n      this.saveToLocalStorageIfPossible();\n    },\n\n    revert: function(gui) {\n      common.each(this.__controllers, function(controller) {\n        // Make revert work on Default.\n        if (!this.getRoot().load.remembered) {\n          controller.setValue(controller.initialValue);\n        } else {\n          recallSavedValue(gui || this.getRoot(), controller);\n        }\n\n        // fire onFinishChange callback\n        if (controller.__onFinishChange) {\n          controller.__onFinishChange.call(controller, controller.getValue());\n        }\n      }, this);\n\n      common.each(this.__folders, function(folder) {\n        folder.revert(folder);\n      });\n\n      if (!gui) {\n        markPresetModified(this.getRoot(), false);\n      }\n    },\n\n    listen: function(controller) {\n      const init = this.__listening.length === 0;\n      this.__listening.push(controller);\n      if (init) {\n        updateDisplays(this.__listening);\n      }\n    },\n\n    updateDisplay: function() {\n      common.each(this.__controllers, function(controller) {\n        controller.updateDisplay();\n      });\n      common.each(this.__folders, function(folder) {\n        folder.updateDisplay();\n      });\n    }\n  }\n);\n\n/**\n * Add a row to the end of the GUI or before another row.\n *\n * @param gui\n * @param [newDom] If specified, inserts the dom content in the new row\n * @param [liBefore] If specified, places the new row before another row\n *\n * @ignore\n */\nfunction addRow(gui, newDom, liBefore) {\n  const li = document.createElement('li');\n  if (newDom) {\n    li.appendChild(newDom);\n  }\n\n  if (liBefore) {\n    gui.__ul.insertBefore(li, liBefore);\n  } else {\n    gui.__ul.appendChild(li);\n  }\n  gui.onResize();\n  return li;\n}\n\nfunction removeListeners(gui) {\n  dom.unbind(window, 'resize', gui.__resizeHandler);\n\n  if (gui.saveToLocalStorageIfPossible) {\n    dom.unbind(window, 'unload', gui.saveToLocalStorageIfPossible);\n  }\n}\n\nfunction markPresetModified(gui, modified) {\n  const opt = gui.__preset_select[gui.__preset_select.selectedIndex];\n\n  if (modified) {\n    opt.innerHTML = opt.value + '*';\n  } else {\n    opt.innerHTML = opt.value;\n  }\n}\n\nfunction augmentController(gui, li, controller) {\n  controller.__li = li;\n  controller.__gui = gui;\n\n  common.extend(controller, /** @lends Controller.prototype */ {\n    /**\n     * @param  {Array|Object} options\n     * @return {Controller}\n     */\n    options: function(options) {\n      if (arguments.length > 1) {\n        const nextSibling = controller.__li.nextElementSibling;\n        controller.remove();\n\n        return add(\n          gui,\n          controller.object,\n          controller.property,\n          {\n            before: nextSibling,\n            factoryArgs: [common.toArray(arguments)]\n          }\n        );\n      }\n\n      if (common.isArray(options) || common.isObject(options)) {\n        const nextSibling = controller.__li.nextElementSibling;\n        controller.remove();\n\n        return add(\n          gui,\n          controller.object,\n          controller.property,\n          {\n            before: nextSibling,\n            factoryArgs: [options]\n          }\n        );\n      }\n    },\n\n    /**\n     * Sets the name of the controller.\n     * @param  {string} name\n     * @return {Controller}\n     */\n    name: function(name) {\n      controller.__li.firstElementChild.firstElementChild.innerHTML = name;\n      return controller;\n    },\n\n    /**\n     * Sets controller to listen for changes on its underlying object.\n     * @return {Controller}\n     */\n    listen: function() {\n      controller.__gui.listen(controller);\n      return controller;\n    },\n\n    /**\n     * Removes the controller from its parent GUI.\n     * @return {Controller}\n     */\n    remove: function() {\n      controller.__gui.remove(controller);\n      return controller;\n    }\n  });\n\n  // All sliders should be accompanied by a box.\n  if (controller instanceof NumberControllerSlider) {\n    const box = new NumberControllerBox(controller.object, controller.property,\n      { min: controller.__min, max: controller.__max, step: controller.__step });\n\n    common.each(['updateDisplay', 'onChange', 'onFinishChange', 'step', 'min', 'max'], function(method) {\n      const pc = controller[method];\n      const pb = box[method];\n      controller[method] = box[method] = function() {\n        const args = Array.prototype.slice.call(arguments);\n        pb.apply(box, args);\n        return pc.apply(controller, args);\n      };\n    });\n\n    dom.addClass(li, 'has-slider');\n    controller.domElement.insertBefore(box.domElement, controller.domElement.firstElementChild);\n  } else if (controller instanceof NumberControllerBox) {\n    const r = function(returned) {\n      // Have we defined both boundaries?\n      if (common.isNumber(controller.__min) && common.isNumber(controller.__max)) {\n        // Well, then lets just replace this with a slider.\n\n        // lets remember if the old controller had a specific name or was listening\n        const oldName = controller.__li.firstElementChild.firstElementChild.innerHTML;\n        const wasListening = controller.__gui.__listening.indexOf(controller) > -1;\n\n        controller.remove();\n        const newController = add(\n          gui,\n          controller.object,\n          controller.property,\n          {\n            before: controller.__li.nextElementSibling,\n            factoryArgs: [controller.__min, controller.__max, controller.__step]\n          });\n\n        newController.name(oldName);\n        if (wasListening) newController.listen();\n\n        return newController;\n      }\n\n      return returned;\n    };\n\n    controller.min = common.compose(r, controller.min);\n    controller.max = common.compose(r, controller.max);\n  } else if (controller instanceof BooleanController) {\n    dom.bind(li, 'click', function() {\n      dom.fakeEvent(controller.__checkbox, 'click');\n    });\n\n    dom.bind(controller.__checkbox, 'click', function(e) {\n      e.stopPropagation(); // Prevents double-toggle\n    });\n  } else if (controller instanceof FunctionController) {\n    dom.bind(li, 'click', function() {\n      dom.fakeEvent(controller.__button, 'click');\n    });\n\n    dom.bind(li, 'mouseover', function() {\n      dom.addClass(controller.__button, 'hover');\n    });\n\n    dom.bind(li, 'mouseout', function() {\n      dom.removeClass(controller.__button, 'hover');\n    });\n  } else if (controller instanceof ColorController) {\n    dom.addClass(li, 'color');\n    controller.updateDisplay = common.compose(function(val) {\n      li.style.borderLeftColor = controller.__color.toString();\n      return val;\n    }, controller.updateDisplay);\n\n    controller.updateDisplay();\n  }\n\n  controller.setValue = common.compose(function(val) {\n    if (gui.getRoot().__preset_select && controller.isModified()) {\n      markPresetModified(gui.getRoot(), true);\n    }\n\n    return val;\n  }, controller.setValue);\n}\n\nfunction recallSavedValue(gui, controller) {\n  // Find the topmost GUI, that's where remembered objects live.\n  const root = gui.getRoot();\n\n  // Does the object we're controlling match anything we've been told to\n  // remember?\n  const matchedIndex = root.__rememberedObjects.indexOf(controller.object);\n\n  // Why yes, it does!\n  if (matchedIndex !== -1) {\n    // Let me fetch a map of controllers for thcommon.isObject.\n    let controllerMap = root.__rememberedObjectIndecesToControllers[matchedIndex];\n\n    // Ohp, I believe this is the first controller we've created for this\n    // object. Lets make the map fresh.\n    if (controllerMap === undefined) {\n      controllerMap = {};\n      root.__rememberedObjectIndecesToControllers[matchedIndex] =\n        controllerMap;\n    }\n\n    // Keep track of this controller\n    controllerMap[controller.property] = controller;\n\n    // Okay, now have we saved any values for this controller?\n    if (root.load && root.load.remembered) {\n      const presetMap = root.load.remembered;\n\n      // Which preset are we trying to load?\n      let preset;\n\n      if (presetMap[gui.preset]) {\n        preset = presetMap[gui.preset];\n      } else if (presetMap[DEFAULT_DEFAULT_PRESET_NAME]) {\n        // Uhh, you can have the default instead?\n        preset = presetMap[DEFAULT_DEFAULT_PRESET_NAME];\n      } else {\n        // Nada.\n        return;\n      }\n\n      // Did the loaded object remember thcommon.isObject? &&  Did we remember this particular property?\n      if (preset[matchedIndex] && preset[matchedIndex][controller.property] !== undefined) {\n        // We did remember something for this guy ...\n        const value = preset[matchedIndex][controller.property];\n\n        // And that's what it is.\n        controller.initialValue = value;\n        controller.setValue(value);\n      }\n    }\n  }\n}\n\nfunction add(gui, object, property, params) {\n  if (object[property] === undefined) {\n    throw new Error(`Object \"${object}\" has no property \"${property}\"`);\n  }\n\n  let controller;\n\n  if (params.color) {\n    controller = new ColorController(object, property);\n  } else {\n    const factoryArgs = [object, property].concat(params.factoryArgs);\n    controller = ControllerFactory.apply(gui, factoryArgs);\n  }\n\n  if (params.before instanceof Controller) {\n    params.before = params.before.__li;\n  }\n\n  recallSavedValue(gui, controller);\n\n  dom.addClass(controller.domElement, 'c');\n\n  const name = document.createElement('span');\n  dom.addClass(name, 'property-name');\n  name.innerHTML = controller.property;\n\n  const container = document.createElement('div');\n  container.appendChild(name);\n  container.appendChild(controller.domElement);\n\n  const li = addRow(gui, container, params.before);\n\n  dom.addClass(li, GUI.CLASS_CONTROLLER_ROW);\n  if (controller instanceof ColorController) {\n    dom.addClass(li, 'color');\n  } else {\n    dom.addClass(li, typeof controller.getValue());\n  }\n\n  augmentController(gui, li, controller);\n\n  gui.__controllers.push(controller);\n\n  return controller;\n}\n\nfunction getLocalStorageHash(gui, key) {\n  // TODO how does this deal with multiple GUI's?\n  return document.location.href + '.' + key;\n}\n\nfunction addPresetOption(gui, name, setSelected) {\n  const opt = document.createElement('option');\n  opt.innerHTML = name;\n  opt.value = name;\n  gui.__preset_select.appendChild(opt);\n  if (setSelected) {\n    gui.__preset_select.selectedIndex = gui.__preset_select.length - 1;\n  }\n}\n\nfunction showHideExplain(gui, explain) {\n  explain.style.display = gui.useLocalStorage ? 'block' : 'none';\n}\n\nfunction addSaveMenu(gui) {\n  const div = gui.__save_row = document.createElement('li');\n\n  dom.addClass(gui.domElement, 'has-save');\n\n  gui.__ul.insertBefore(div, gui.__ul.firstChild);\n\n  dom.addClass(div, 'save-row');\n\n  const gears = document.createElement('span');\n  gears.innerHTML = '&nbsp;';\n  dom.addClass(gears, 'button gears');\n\n  // TODO replace with FunctionController\n  const button = document.createElement('span');\n  button.innerHTML = 'Save';\n  dom.addClass(button, 'button');\n  dom.addClass(button, 'save');\n\n  const button2 = document.createElement('span');\n  button2.innerHTML = 'New';\n  dom.addClass(button2, 'button');\n  dom.addClass(button2, 'save-as');\n\n  const button3 = document.createElement('span');\n  button3.innerHTML = 'Revert';\n  dom.addClass(button3, 'button');\n  dom.addClass(button3, 'revert');\n\n  const select = gui.__preset_select = document.createElement('select');\n\n  if (gui.load && gui.load.remembered) {\n    common.each(gui.load.remembered, function(value, key) {\n      addPresetOption(gui, key, key === gui.preset);\n    });\n  } else {\n    addPresetOption(gui, DEFAULT_DEFAULT_PRESET_NAME, false);\n  }\n\n  dom.bind(select, 'change', function() {\n    for (let index = 0; index < gui.__preset_select.length; index++) {\n      gui.__preset_select[index].innerHTML = gui.__preset_select[index].value;\n    }\n\n    gui.preset = this.value;\n  });\n\n  div.appendChild(select);\n  div.appendChild(gears);\n  div.appendChild(button);\n  div.appendChild(button2);\n  div.appendChild(button3);\n\n  if (SUPPORTS_LOCAL_STORAGE) {\n    const explain = document.getElementById('dg-local-explain');\n    const localStorageCheckBox = document.getElementById('dg-local-storage');\n    const saveLocally = document.getElementById('dg-save-locally');\n\n    saveLocally.style.display = 'block';\n\n    if (localStorage.getItem(getLocalStorageHash(gui, 'isLocal')) === 'true') {\n      localStorageCheckBox.setAttribute('checked', 'checked');\n    }\n\n    showHideExplain(gui, explain);\n\n    // TODO: Use a boolean controller, fool!\n    dom.bind(localStorageCheckBox, 'change', function() {\n      gui.useLocalStorage = !gui.useLocalStorage;\n      showHideExplain(gui, explain);\n    });\n  }\n\n  const newConstructorTextArea = document.getElementById('dg-new-constructor');\n\n  dom.bind(newConstructorTextArea, 'keydown', function(e) {\n    if (e.metaKey && (e.which === 67 || e.keyCode === 67)) {\n      SAVE_DIALOGUE.hide();\n    }\n  });\n\n  dom.bind(gears, 'click', function() {\n    newConstructorTextArea.innerHTML = JSON.stringify(gui.getSaveObject(), undefined, 2);\n    SAVE_DIALOGUE.show();\n    newConstructorTextArea.focus();\n    newConstructorTextArea.select();\n  });\n\n  dom.bind(button, 'click', function() {\n    gui.save();\n  });\n\n  dom.bind(button2, 'click', function() {\n    const presetName = prompt('Enter a new preset name.');\n    if (presetName) {\n      gui.saveAs(presetName);\n    }\n  });\n\n  dom.bind(button3, 'click', function() {\n    gui.revert();\n  });\n\n  // div.appendChild(button2);\n}\n\nfunction addResizeHandle(gui) {\n  let pmouseX;\n\n  gui.__resize_handle = document.createElement('div');\n\n  common.extend(gui.__resize_handle.style, {\n\n    width: '6px',\n    marginLeft: '-3px',\n    height: '200px',\n    cursor: 'ew-resize',\n    position: 'absolute'\n    // border: '1px solid blue'\n\n  });\n\n  function drag(e) {\n    e.preventDefault();\n\n    gui.width += pmouseX - e.clientX;\n    gui.onResize();\n    pmouseX = e.clientX;\n\n    return false;\n  }\n\n  function dragStop() {\n    dom.removeClass(gui.__closeButton, GUI.CLASS_DRAG);\n    dom.unbind(window, 'mousemove', drag);\n    dom.unbind(window, 'mouseup', dragStop);\n  }\n\n  function dragStart(e) {\n    e.preventDefault();\n\n    pmouseX = e.clientX;\n\n    dom.addClass(gui.__closeButton, GUI.CLASS_DRAG);\n    dom.bind(window, 'mousemove', drag);\n    dom.bind(window, 'mouseup', dragStop);\n\n    return false;\n  }\n\n  dom.bind(gui.__resize_handle, 'mousedown', dragStart);\n  dom.bind(gui.__closeButton, 'mousedown', dragStart);\n\n  gui.domElement.insertBefore(gui.__resize_handle, gui.domElement.firstElementChild);\n}\n\nfunction setWidth(gui, w) {\n  gui.domElement.style.width = w + 'px';\n  // Auto placed save-rows are position fixed, so we have to\n  // set the width manually if we want it to bleed to the edge\n  if (gui.__save_row && gui.autoPlace) {\n    gui.__save_row.style.width = w + 'px';\n  }\n  if (gui.__closeButton) {\n    gui.__closeButton.style.width = w + 'px';\n  }\n}\n\nfunction getCurrentPreset(gui, useInitialValues) {\n  const toReturn = {};\n\n  // For each object I'm remembering\n  common.each(gui.__rememberedObjects, function(val, index) {\n    const savedValues = {};\n\n    // The controllers I've made for thcommon.isObject by property\n    const controllerMap =\n      gui.__rememberedObjectIndecesToControllers[index];\n\n    // Remember each value for each property\n    common.each(controllerMap, function(controller, property) {\n      savedValues[property] = useInitialValues ? controller.initialValue : controller.getValue();\n    });\n\n    // Save the values for thcommon.isObject\n    toReturn[index] = savedValues;\n  });\n\n  return toReturn;\n}\n\nfunction setPresetSelectIndex(gui) {\n  for (let index = 0; index < gui.__preset_select.length; index++) {\n    if (gui.__preset_select[index].value === gui.preset) {\n      gui.__preset_select.selectedIndex = index;\n    }\n  }\n}\n\nfunction updateDisplays(controllerArray) {\n  if (controllerArray.length !== 0) {\n    requestAnimationFrame.call(window, function() {\n      updateDisplays(controllerArray);\n    });\n  }\n\n  common.each(controllerArray, function(c) {\n    c.updateDisplay();\n  });\n}\n\nexport default GUI;\n","/**\n* matter-js 0.14.2 by @liabru 2018-06-11\n* http://brm.io/matter-js/\n* License MIT\n*/\n\n/**\n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Matter = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(_dereq_,module,exports){\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Render = _dereq_('../render/Render');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                },\n                lineWidth: 0\n            }\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#2e2b44' : Common.choose(['#006BA6', '#0496FF', '#FFBC42', '#D81159', '#8F2D56'])),\n            defaultStrokeStyle = '#000';\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            value = settings[property];\n\n            if (!settings.hasOwnProperty(property))\n                continue;\n\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                delete part._original;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n     /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n     /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31}],2:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n* A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n* It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n* Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = _dereq_('../core/Events');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Body = _dereq_('./Body');\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {}\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for(var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {} object\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n                        .concat(Composite.allConstraints(composite))\n                        .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n     * If you need to change it manually, you should use the `Composite.setModified` method.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"./Body\":1}],3:[function(_dereq_,module,exports){\n/**\n* The `Matter.World` module contains methods for creating and manipulating the world composite.\n* A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n* A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n* It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n* There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class World\n* @extends Composite\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = _dereq_('./Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @constructor\n     * @param {} options\n     * @return {world} A new world\n     */\n    World.create = function(options) {\n        var composite = Composite.create();\n\n        var defaults = {\n            label: 'World',\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            bounds: { \n                min: { x: -Infinity, y: -Infinity }, \n                max: { x: Infinity, y: Infinity } \n            }\n        };\n        \n        return Common.extend(composite, defaults, options);\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The gravity to apply on the world.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n    /**\n     * A `Bounds` object that defines the world bounds for collision detection.\n     *\n     * @property bounds\n     * @type bounds\n     * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\n     */\n\n    // World is a Composite body\n    // see src/module/Outro.js for these aliases:\n    \n    /**\n     * An alias for Composite.add\n     * @method add\n     * @param {world} world\n     * @param {} object\n     * @return {composite} The original world with the objects added\n     */\n\n    /**\n     * An alias for Composite.remove\n     * @method remove\n     * @param {world} world\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original world with the objects removed\n     */\n\n    /**\n     * An alias for Composite.clear\n     * @method clear\n     * @param {world} world\n     * @param {boolean} keepStatic\n     */\n\n    /**\n     * An alias for Composite.addComposite\n     * @method addComposite\n     * @param {world} world\n     * @param {composite} composite\n     * @return {world} The original world with the objects from composite added\n     */\n    \n     /**\n      * An alias for Composite.addBody\n      * @method addBody\n      * @param {world} world\n      * @param {body} body\n      * @return {world} The original world with the body added\n      */\n\n     /**\n      * An alias for Composite.addConstraint\n      * @method addConstraint\n      * @param {world} world\n      * @param {constraint} constraint\n      * @return {world} The original world with the constraint added\n      */\n\n})();\n\n},{\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Composite\":2}],4:[function(_dereq_,module,exports){\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n    \n    /**\n     * Generates a contact id.\n     * @method id\n     * @param {vertex} vertex\n     * @return {string} Unique contactID\n     */\n    Contact.id = function(vertex) {\n        return vertex.body.id + '_' + vertex.index;\n    };\n\n})();\n\n},{}],5:[function(_dereq_,module,exports){\n/**\n* The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n*\n* @class Detector\n*/\n\n// TODO: speculative contacts\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar SAT = _dereq_('./SAT');\nvar Pair = _dereq_('./Pair');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Finds all collisions given a list of pairs.\n     * @method collisions\n     * @param {pair[]} broadphasePairs\n     * @param {engine} engine\n     * @return {array} collisions\n     */\n    Detector.collisions = function(broadphasePairs, engine) {\n        var collisions = [],\n            pairsTable = engine.pairs.table;\n\n        \n        for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0], \n                bodyB = broadphasePairs[i][1];\n\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping))\n                continue;\n            \n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\n                continue;\n\n\n            // mid phase\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n                for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                    var partA = bodyA.parts[j];\n\n                    for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                        var partB = bodyB.parts[k];\n\n                        if ((partA === bodyA && partB === bodyB) || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                            // find a previous collision we could reuse\n                            var pairId = Pair.id(partA, partB),\n                                pair = pairsTable[pairId],\n                                previousCollision;\n\n                            if (pair && pair.isActive) {\n                                previousCollision = pair.collision;\n                            } else {\n                                previousCollision = null;\n                            }\n\n                            // narrow phase\n                            var collision = SAT.collides(partA, partB, previousCollision);\n\n\n                            if (collision.collided) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n})();\n\n},{\"../geometry/Bounds\":26,\"./Pair\":7,\"./SAT\":11}],6:[function(_dereq_,module,exports){\n/**\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = _dereq_('./Pair');\nvar Detector = _dereq_('./Detector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            controller: Grid,\n            detector: Detector.collisions,\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // don't update out of world bodies\n            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    /**\n     * Clears the grid.\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        // add new pairs\n        for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                grid.pairs[pairId] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        // update pair counts\n        for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pairKeys,\n            pair,\n            pairs = [];\n\n        // grid.pairs is used as a hashmap\n        pairKeys = Common.keys(grid.pairs);\n\n        // iterate over grid.pairs\n        for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete grid.pairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n},{\"../core/Common\":14,\"./Detector\":5,\"./Pair\":7}],7:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = _dereq_('./Contact');\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n        \n        pair.collision = collision;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = Math.min(parentA.friction, parentB.friction);\n        pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n        pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n        pair.slop = Math.max(parentA.slop, parentB.slop);\n        activeContacts.length = 0;\n        \n        if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n                var support = supports[i],\n                    contactId = Contact.id(support),\n                    contact = contacts[contactId];\n\n                if (contact) {\n                    activeContacts.push(contact);\n                } else {\n                    activeContacts.push(contacts[contactId] = Contact.create(support));\n                }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n        } else {\n            if (pair.isActive === true)\n                Pair.setActive(pair, false, timestamp);\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n},{\"./Contact\":4}],8:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = _dereq_('./Pair');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n    \n    Pairs._pairMaxIdleLife = 1000;\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            activePairIds = [],\n            collision,\n            pairId,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n                pairId = Pair.id(collision.bodyA, collision.bodyB);\n                activePairIds.push(pairId);\n\n                pair = pairsTable[pairId];\n                \n                if (pair) {\n                    // pair already exists (but may or may not be active)\n                    if (pair.isActive) {\n                        // pair exists and is active\n                        collisionActive.push(pair);\n                    } else {\n                        // pair exists but was inactive, so a collision has just started again\n                        collisionStart.push(pair);\n                    }\n\n                    // update the pair\n                    Pair.update(pair, collision, timestamp);\n                } else {\n                    // pair did not exist, create a new pair\n                    pair = Pair.create(collision, timestamp);\n                    pairsTable[pairId] = pair;\n\n                    // push the new pair\n                    collisionStart.push(pair);\n                    pairsList.push(pair);\n                }\n            }\n        }\n\n        // deactivate previously active pairs that are now inactive\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            if (pair.isActive && Common.indexOf(activePairIds, pair.id) === -1) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n            }\n        }\n    };\n    \n    /**\n     * Finds and removes pairs that have been inactive for a set amount of time.\n     * @method removeOld\n     * @param {object} pairs\n     * @param {number} timestamp\n     */\n    Pairs.removeOld = function(pairs, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            indexesToRemove = [],\n            pair,\n            collision,\n            pairIndex,\n            i;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision;\n            \n            // never remove sleeping pairs\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n                pair.timeUpdated = timestamp;\n                continue;\n            }\n\n            // if pair is inactive for too long, mark it to be removed\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\n                indexesToRemove.push(i);\n            }\n        }\n\n        // remove marked pairs\n        for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n},{\"../core/Common\":14,\"./Pair\":7}],9:[function(_dereq_,module,exports){\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar SAT = _dereq_('./SAT');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Bodies = _dereq_('../factory/Bodies');\nvar Vertices = _dereq_('../geometry/Vertices');\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {object[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n            \n            if (Bounds.overlaps(bodyA.bounds, body.bounds)) {\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (Bounds.overlaps(part.bounds, body.bounds)) {\n                        var collision = SAT.collides(part, body);\n\n                        if (collision.collided) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {object[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n},{\"../factory/Bodies\":23,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"./SAT\":11}],10:[function(_dereq_,module,exports){\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount;\n\n        // find total contacts on each body\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            bodyBtoA,\n            contactShare,\n            positionImpulse,\n            contactCount = {},\n            tempA = Vector._temp[0],\n            tempB = Vector._temp[1],\n            tempC = Vector._temp[2],\n            tempD = Vector._temp[3];\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), \n                                    Vector.add(bodyA.positionImpulse, \n                                        Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n\n            pair.separation = Vector.dot(normal, bodyBtoA);\n        }\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    Vertices.translate(part.vertices, body.positionImpulse);\n                    Bounds.update(part.bounds, part.vertices, body.velocity);\n                    part.position.x += body.positionImpulse.x;\n                    part.position.y += body.positionImpulse.y;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += body.positionImpulse.x;\n                body.positionPrev.y += body.positionImpulse.y;\n\n                if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    body.positionImpulse.x = 0;\n                    body.positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    body.positionImpulse.x *= Resolver._positionWarming;\n                    body.positionImpulse.y *= Resolver._positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var i,\n            j,\n            pair,\n            contacts,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            tangent,\n            contact,\n            contactVertex,\n            normalImpulse,\n            tangentImpulse,\n            offset,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1];\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent;\n\n            // resolve each contact\n            for (j = 0; j < contacts.length; j++) {\n                contact = contacts[j];\n                contactVertex = contact.vertex;\n                normalImpulse = contact.normalImpulse;\n                tangentImpulse = contact.tangentImpulse;\n\n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                    impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                        bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                        bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                    }\n\n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                        bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                        bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1],\n            tempB = Vector._temp[2],\n            tempC = Vector._temp[3],\n            tempD = Vector._temp[4],\n            tempE = Vector._temp[5];\n        \n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length;\n\n            // update body velocities\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (var j = 0; j < contacts.length; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                    offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                    velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                    velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD), \n                    relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                    normalVelocity = Vector.dot(normal, relativeVelocity);\n\n                var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                    tangentSpeed = Math.abs(tangentVelocity),\n                    tangentVelocityDirection = Common.sign(tangentVelocity);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                    normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier;\n\n                // coulomb friction\n                var tangentImpulse = tangentVelocity,\n                    maxFriction = Infinity;\n\n                if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                    maxFriction = tangentSpeed;\n                    tangentImpulse = Common.clamp(\n                        pair.friction * tangentVelocityDirection * timeScaleSquared,\n                        -maxFriction, maxFriction\n                    );\n                }\n\n                // modify impulses accounting for mass, inertia and offset\n                var oAcN = Vector.cross(offsetA, normal),\n                    oBcN = Vector.cross(offsetB, normal),\n                    share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN  + bodyB.inverseInertia * oBcN * oBcN);\n\n                normalImpulse *= share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                    bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                    bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],11:[function(_dereq_,module,exports){\n/**\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n*/\n\n// TODO: true circles and curves\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {collision} previousCollision\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB, previousCollision) {\n        var overlapAB,\n            overlapBA, \n            minOverlap,\n            collision,\n            canReusePrevCol = false;\n\n        if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed\n                       + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed;\n\n            // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2;\n\n            // reuse collision object\n            collision = previousCollision;\n        } else {\n            collision = { collided: false, bodyA: bodyA, bodyB: bodyB };\n        }\n\n        if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[previousCollision.axisNumber]];\n\n            minOverlap = SAT._overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n        } else {\n            // if we can't reuse a result, perform a full SAT test\n\n            overlapAB = SAT._overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            overlapBA = SAT._overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n                minOverlap = overlapAB;\n                collision.axisBody = bodyA;\n            } else {\n                minOverlap = overlapBA;\n                collision.axisBody = bodyB;\n            }\n\n            // important for reuse later\n            collision.axisNumber = minOverlap.axisNumber;\n        }\n\n        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n        collision.collided = true;\n        collision.depth = minOverlap.overlap;\n        collision.parentA = collision.bodyA.parent;\n        collision.parentB = collision.bodyB.parent;\n        \n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        // ensure normal is facing away from bodyA\n        if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n                x: minOverlap.axis.x,\n                y: minOverlap.axis.y\n            };\n        } else {\n            collision.normal = {\n                x: -minOverlap.axis.x,\n                y: -minOverlap.axis.y\n            };\n        }\n\n        collision.tangent = Vector.perp(collision.normal);\n\n        collision.penetration = collision.penetration || {};\n        collision.penetration.x = collision.normal.x * collision.depth;\n        collision.penetration.y = collision.normal.y * collision.depth; \n\n        // find support points, there is always either exactly one or two\n        var verticesB = SAT._findSupports(bodyA, bodyB, collision.normal),\n            supports = [];\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, verticesB[0]))\n            supports.push(verticesB[0]);\n\n        if (Vertices.contains(bodyA.vertices, verticesB[1]))\n            supports.push(verticesB[1]);\n\n        // find the supports from bodyA that are inside bodyB\n        if (supports.length < 2) {\n            var verticesA = SAT._findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n                \n            if (Vertices.contains(bodyB.vertices, verticesA[0]))\n                supports.push(verticesA[0]);\n\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1]))\n                supports.push(verticesA[1]);\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supports.length < 1)\n            supports = [verticesB[0]];\n        \n        collision.supports = supports;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {} verticesA\n     * @param {} verticesB\n     * @param {} axes\n     * @return result\n     */\n    SAT._overlapAxes = function(verticesA, verticesB, axes) {\n        var projectionA = Vector._temp[0], \n            projectionB = Vector._temp[1],\n            result = { overlap: Number.MAX_VALUE },\n            overlap,\n            axis;\n\n        for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            SAT._projectToAxis(projectionA, verticesA, axis);\n            SAT._projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n                result.overlap = overlap;\n                return result;\n            }\n\n            if (overlap < result.overlap) {\n                result.overlap = overlap;\n                result.axis = axis;\n                result.axisNumber = i;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    SAT._projectToAxis = function(projection, vertices, axis) {\n        var min = Vector.dot(vertices[0], axis),\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n    \n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {} bodyA\n     * @param {} bodyB\n     * @param {} normal\n     * @return [vector]\n     */\n    SAT._findSupports = function(bodyA, bodyB, normal) {\n        var nearestDistance = Number.MAX_VALUE,\n            vertexToBody = Vector._temp[0],\n            vertices = bodyB.vertices,\n            bodyAPosition = bodyA.position,\n            distance,\n            vertex,\n            vertexA,\n            vertexB;\n\n        // find closest vertex on bodyB\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertex;\n            }\n        }\n\n        // find next closest vertex using the two connected to it\n        var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n        vertex = vertices[prevIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        nearestDistance = -Vector.dot(normal, vertexToBody);\n        vertexB = vertex;\n\n        var nextIndex = (vertexA.index + 1) % vertices.length;\n        vertex = vertices[nextIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        distance = -Vector.dot(normal, vertexToBody);\n        if (distance < nearestDistance) {\n            vertexB = vertex;\n        }\n\n        return [vertexA, vertexB];\n    };\n\n})();\n\n},{\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],12:[function(_dereq_,module,exports){\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],13:[function(_dereq_,module,exports){\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Mouse = _dereq_('../core/Mouse');\nvar Events = _dereq_('../core/Events');\nvar Detector = _dereq_('../collision/Detector');\nvar Constraint = _dereq_('./Constraint');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Detector\":5,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../core/Sleeping\":22,\"../geometry/Bounds\":26,\"../geometry/Vertices\":29,\"./Constraint\":12}],14:[function(_dereq_,module,exports){\n(function (global){\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n\n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result will be high-resolution including decimal places if available.\n     * @method now\n     * @return {number} the current timestamp\n     */\n    Common.now = function() {\n        if (window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Used to require external libraries outside of the bundle.\n     * It first looks for the `globalName` on the environment's global namespace.\n     * If the global is not found, it will fall back to using the standard `require` using the `moduleName`.\n     * @private\n     * @method _requireGlobal\n     * @param {string} globalName The global module name\n     * @param {string} moduleName The fallback CommonJS module name\n     * @return {} The loaded module\n     */\n    Common._requireGlobal = function(globalName, moduleName) {\n        var obj = (typeof window !== 'undefined' ? window[globalName] : typeof global !== 'undefined' ? global[globalName] : null);\n        return obj || _dereq_(moduleName);\n    };\n})();\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],15:[function(_dereq_,module,exports){\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar World = _dereq_('../body/World');\nvar Sleeping = _dereq_('./Sleeping');\nvar Resolver = _dereq_('../collision/Resolver');\nvar Render = _dereq_('../render/Render');\nvar Pairs = _dereq_('../collision/Pairs');\nvar Metrics = _dereq_('./Metrics');\nvar Grid = _dereq_('../collision/Grid');\nvar Events = _dereq_('./Events');\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('./Common');\nvar Body = _dereq_('../body/Body');\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(element, options) {\n        // options may be passed as the first (and only) argument\n        options = Common.isElement(element) ? options : element;\n        element = Common.isElement(element) ? element : null;\n        options = options || {};\n\n        if (element || options.render) {\n            Common.warn('Engine.create: engine.render is deprecated (see docs)');\n        }\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            timing: {\n                timestamp: 0,\n                timeScale: 1\n            },\n            broadphase: {\n                controller: Grid\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        // @deprecated\n        if (element || engine.render) {\n            var renderDefaults = {\n                element: element,\n                controller: Render\n            };\n            \n            engine.render = Common.extend(renderDefaults, engine.render);\n        }\n\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            engine.render = engine.render.controller.create(engine.render);\n        }\n\n        // @deprecated\n        if (engine.render) {\n            engine.render.engine = engine;\n        }\n\n        engine.world = options.world || World.create(engine.world);\n        engine.pairs = Pairs.create();\n        engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\n        engine.metrics = engine.metrics || { extended: false };\n\n\n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            timing = engine.timing,\n            broadphase = engine.broadphase,\n            broadphasePairs = [],\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get lists of all bodies and constraints, no matter what composites they are in\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n\n        // if sleeping enabled, call the sleeping controller\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // applies gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, world.gravity);\n\n        // update all body position and rotation by integration\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // broadphase pass: find potential collision pairs\n        if (broadphase.controller) {\n            // if world is dirty, we must flush the whole grid\n            if (world.isModified)\n                broadphase.controller.clear(broadphase);\n\n            // update the grid buckets based on current bodies\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\n            broadphasePairs = broadphase.pairsList;\n        } else {\n            // if no broadphase set, we just pass all bodies\n            broadphasePairs = allBodies;\n        }\n\n        // clear all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // narrowphase pass: find actual collisions, then create or update collision pairs\n        var collisions = broadphase.detector(broadphasePairs, engine);\n\n        // update collision pairs\n        var pairs = engine.pairs,\n            timestamp = timing.timestamp;\n        Pairs.update(pairs, collisions, timestamp);\n        Pairs.removeOld(pairs, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine including the world, pairs and broadphase.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        var world = engine.world;\n        \n        Pairs.clear(engine.pairs);\n\n        var broadphase = engine.broadphase;\n        if (broadphase.controller) {\n            var bodies = Composite.allBodies(world);\n            broadphase.controller.clear(broadphase);\n            broadphase.controller.update(broadphase, bodies, engine, true);\n        }\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * An alias for `Runner.run`, see `Matter.Runner` for more information.\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n     * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n     *\n     * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n     * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n     *\n     * @property render\n     * @type render\n     * @deprecated see Demo.js for an example of creating a renderer\n     * @default a Matter.Render instance\n     */\n\n    /**\n     * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n     *\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * A `World` composite object that will contain all simulated bodies and constraints.\n     *\n     * @property world\n     * @type world\n     * @default a Matter.World instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Grid\":6,\"../collision/Pairs\":8,\"../collision/Resolver\":10,\"../constraint/Constraint\":12,\"../render/Render\":31,\"./Common\":14,\"./Events\":16,\"./Metrics\":18,\"./Sleeping\":22}],16:[function(_dereq_,module,exports){\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        if (object.events) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = object.events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"./Common\":14}],17:[function(_dereq_,module,exports){\n/**\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\n*\n* @class Matter\n*/\n\nvar Matter = {};\n\nmodule.exports = Matter;\n\nvar Plugin = _dereq_('./Plugin');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * The library name.\n     * @property name\n     * @readOnly\n     * @type {String}\n     */\n    Matter.name = 'matter-js';\n\n    /**\n     * The library version.\n     * @property version\n     * @readOnly\n     * @type {String}\n     */\n    Matter.version = '0.14.2';\n\n    /**\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\n     * @property uses\n     * @type {Array}\n     */\n    Matter.uses = [];\n\n    /**\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\n     * @property used\n     * @readOnly\n     * @type {Array}\n     */\n    Matter.used = [];\n\n    /**\n     * Installs the given plugins on the `Matter` namespace.\n     * This is a short-hand for `Plugin.use`, see it for more information.\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\n     * @method use\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\n     */\n    Matter.use = function() {\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method before\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.before = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathBefore(Matter, path, func);\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method after\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.after = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathAfter(Matter, path, func);\n    };\n\n})();\n\n},{\"./Common\":14,\"./Plugin\":20}],18:[function(_dereq_,module,exports){\n\n},{\"../body/Composite\":2,\"./Common\":14}],19:[function(_dereq_,module,exports){\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = mouse.element.getAttribute('data-pixel-ratio') || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n},{\"../core/Common\":14}],20:[function(_dereq_,module,exports){\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var identifiers = range.split('-');\n        range = identifiers[0];\n\n        var isRange = isNaN(Number(range[0])),\n            version = isRange ? range.substr(1) : range,\n            parts = Common.map(version.split('.'), function(part) {\n                return Number(part);\n            });\n\n        return {\n            isRange: isRange,\n            version: version,\n            range: range,\n            operator: isRange ? range[0] : '',\n            parts: parts,\n            prerelease: identifiers[1],\n            number: parts[0] * 1e8 + parts[1] * 1e4 + parts[2]\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var rangeParsed = Plugin.versionParse(range),\n            rangeParts = rangeParsed.parts,\n            versionParsed = Plugin.versionParse(version),\n            versionParts = versionParsed.parts;\n\n        if (rangeParsed.isRange) {\n            if (rangeParsed.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (rangeParsed.operator === '~') {\n                return versionParts[0] === rangeParts[0] && versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n            }\n\n            if (rangeParsed.operator === '^') {\n                if (rangeParts[0] > 0) {\n                    return versionParts[0] === rangeParts[0] && versionParsed.number >= rangeParsed.number;\n                }\n\n                if (rangeParts[1] > 0) {\n                    return versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n                }\n\n                return versionParts[2] === rangeParts[2];\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n},{\"./Common\":14}],21:[function(_dereq_,module,exports){\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = _dereq_('./Events');\nvar Engine = _dereq_('./Engine');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n        Events.trigger(engine, 'beforeTick', event); // @deprecated\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n        Events.trigger(engine, 'tick', event); // @deprecated\n\n        // if world has been modified, clear the render scene graph\n        if (engine.world.isModified \n            && engine.render\n            && engine.render.controller\n            && engine.render.controller.clear) {\n            engine.render.controller.clear(engine.render); // @deprecated\n        }\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        // render\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            Events.trigger(runner, 'beforeRender', event);\n            Events.trigger(engine, 'beforeRender', event); // @deprecated\n\n            engine.render.controller.world(engine.render);\n\n            Events.trigger(runner, 'afterRender', event);\n            Events.trigger(engine, 'afterRender', event); // @deprecated\n        }\n\n        Events.trigger(runner, 'afterTick', event);\n        Events.trigger(engine, 'afterTick', event); // @deprecated\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n},{\"./Common\":14,\"./Engine\":15,\"./Events\":16}],22:[function(_dereq_,module,exports){\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = _dereq_('./Events');\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n},{\"./Events\":16}],23:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Vector = _dereq_('../geometry/Vector');\nvar decomp;\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\n     * If the vertices are convex, they will pass through as supplied.\n     * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\n     * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\n     * By default the decomposition will discard collinear edges (to improve performance).\n     * It can also optionally discard any parts that have an area less than `minimumArea`.\n     * If the vertices can not be decomposed, the result will fall back to using the convex hull.\n     * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param [[vector]] vertexSets\n     * @param {object} [options]\n     * @param {bool} [flagInternal=false]\n     * @param {number} [removeCollinear=0.01]\n     * @param {number} [minimumArea=10]\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea) {\n        if (!decomp) {\n            decomp = Common._requireGlobal('decomp', 'poly-decomp');\n        }\n\n        var body,\n            parts,\n            isConvex,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n\n        if (!decomp) {\n            Common.warn('Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.');\n        }\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n\n            if (isConvex || !decomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],24:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bodies = _dereq_('./Bodies');\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * Creates a composite with a Newton's Cradle setup of bodies and constraints.\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                            { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n    \n    /**\n     * Creates a composite with simple car setup of bodies and constraints.\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    /**\n     * Creates a simple soft body like object.\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Bodies\":23}],25:[function(_dereq_,module,exports){\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],26:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n},{}],27:[function(_dereq_,module,exports){\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n},{\"../core/Common\":14,\"../geometry/Bounds\":26}],28:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n},{}],29:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        var i;\n        if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x * scalar;\n                vertices[i].y += vector.y * scalar;\n            }\n        } else {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x;\n                vertices[i].y += vector.y;\n            }\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n                \n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],30:[function(_dereq_,module,exports){\nvar Matter = module.exports = _dereq_('../core/Matter');\n\nMatter.Body = _dereq_('../body/Body');\nMatter.Composite = _dereq_('../body/Composite');\nMatter.World = _dereq_('../body/World');\n\nMatter.Contact = _dereq_('../collision/Contact');\nMatter.Detector = _dereq_('../collision/Detector');\nMatter.Grid = _dereq_('../collision/Grid');\nMatter.Pairs = _dereq_('../collision/Pairs');\nMatter.Pair = _dereq_('../collision/Pair');\nMatter.Query = _dereq_('../collision/Query');\nMatter.Resolver = _dereq_('../collision/Resolver');\nMatter.SAT = _dereq_('../collision/SAT');\n\nMatter.Constraint = _dereq_('../constraint/Constraint');\nMatter.MouseConstraint = _dereq_('../constraint/MouseConstraint');\n\nMatter.Common = _dereq_('../core/Common');\nMatter.Engine = _dereq_('../core/Engine');\nMatter.Events = _dereq_('../core/Events');\nMatter.Mouse = _dereq_('../core/Mouse');\nMatter.Runner = _dereq_('../core/Runner');\nMatter.Sleeping = _dereq_('../core/Sleeping');\nMatter.Plugin = _dereq_('../core/Plugin');\n\n\nMatter.Bodies = _dereq_('../factory/Bodies');\nMatter.Composites = _dereq_('../factory/Composites');\n\nMatter.Axes = _dereq_('../geometry/Axes');\nMatter.Bounds = _dereq_('../geometry/Bounds');\nMatter.Svg = _dereq_('../geometry/Svg');\nMatter.Vector = _dereq_('../geometry/Vector');\nMatter.Vertices = _dereq_('../geometry/Vertices');\n\nMatter.Render = _dereq_('../render/Render');\nMatter.RenderPixi = _dereq_('../render/RenderPixi');\n\n// aliases\n\nMatter.World.add = Matter.Composite.add;\nMatter.World.remove = Matter.Composite.remove;\nMatter.World.addComposite = Matter.Composite.addComposite;\nMatter.World.addBody = Matter.Composite.addBody;\nMatter.World.addConstraint = Matter.Composite.addConstraint;\nMatter.World.clear = Matter.Composite.clear;\nMatter.Engine.run = Matter.Runner.run;\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Contact\":4,\"../collision/Detector\":5,\"../collision/Grid\":6,\"../collision/Pair\":7,\"../collision/Pairs\":8,\"../collision/Query\":9,\"../collision/Resolver\":10,\"../collision/SAT\":11,\"../constraint/Constraint\":12,\"../constraint/MouseConstraint\":13,\"../core/Common\":14,\"../core/Engine\":15,\"../core/Events\":16,\"../core/Matter\":17,\"../core/Metrics\":18,\"../core/Mouse\":19,\"../core/Plugin\":20,\"../core/Runner\":21,\"../core/Sleeping\":22,\"../factory/Bodies\":23,\"../factory/Composites\":24,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Svg\":27,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31,\"../render/RenderPixi\":32}],31:[function(_dereq_,module,exports){\n/**\n* The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = _dereq_('../core/Common');\nvar Composite = _dereq_('../body/Composite');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Events = _dereq_('../core/Events');\nvar Grid = _dereq_('../collision/Grid');\nvar Vector = _dereq_('../geometry/Vector');\nvar Mouse = _dereq_('../core/Mouse');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#18181d',\n                wireframeBackground: '#0f0f13',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            Render.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n        render.context.scale(pixelRatio, pixelRatio);\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.showBroadphase && engine.broadphase.controller === Grid)\n            Render.grid(render, engine.broadphase, context);\n\n        if (options.showDebug)\n            Render.debug(render, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method debug\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.debug = function(render, context) {\n        var c = context,\n            engine = render.engine,\n            world = engine.world,\n            metrics = engine.metrics,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            space = \"    \";\n\n        if (engine.timing.timestamp - (render.debugTimestamp || 0) >= 500) {\n            var text = \"\";\n\n            if (metrics.timing) {\n                text += \"fps: \" + Math.round(metrics.timing.fps) + space;\n            }\n\n\n            render.debugString = text;\n            render.debugTimestamp = engine.timing.timestamp;\n        }\n\n        if (render.debugString) {\n            c.font = \"12px Arial\";\n\n            if (options.wireframes) {\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n            } else {\n                c.fillStyle = 'rgba(0,0,0,0.5)';\n            }\n\n            var split = render.debugString.split('\\n');\n\n            for (var i = 0; i < split.length; i++) {\n                c.fillText(split[i], 50, 50 + i * 18);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodyShadows\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyShadows = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            if (body.circleRadius) {\n                c.beginPath();\n                c.arc(body.position.x, body.position.y, body.circleRadius, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                c.beginPath();\n                c.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (var j = 1; j < body.vertices.length; j++) {\n                    c.lineTo(body.vertices[j].x, body.vertices[j].y);\n                }\n                c.closePath();\n            }\n\n            var distanceX = body.position.x - render.options.width * 0.5,\n                distanceY = body.position.y - render.options.height * 0.2,\n                distance = Math.abs(distanceX) + Math.abs(distanceY);\n\n            c.shadowColor = 'rgba(0,0,0,0.15)';\n            c.shadowOffsetX = 0.05 * distanceX;\n            c.shadowOffsetY = 0.05 * distanceY;\n            c.shadowBlur = 1 + 12 * Math.min(1, distance / 1000);\n\n            c.fill();\n\n            c.shadowColor = null;\n            c.shadowOffsetX = null;\n            c.shadowOffsetY = null;\n            c.shadowBlur = null;\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                                 (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method grid\n     * @param {render} render\n     * @param {grid} grid\n     * @param {RenderingContext} context\n     */\n    Render.grid = function(render, grid, context) {\n        var c = context,\n            options = render.options;\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n        } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n        }\n\n        c.beginPath();\n\n        var bucketKeys = Common.keys(grid.buckets);\n\n        for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n\n            if (grid.buckets[bucketId].length < 2)\n                continue;\n\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth,\n                    0.5 + parseInt(region[2], 10) * grid.bucketHeight,\n                    grid.bucketWidth,\n                    grid.bucketHeight);\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                             Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                         Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Description\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Grid\":6,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}],32:[function(_dereq_,module,exports){\n/**\n* The `Matter.RenderPixi` module is an example renderer using pixi.js.\n* See also `Matter.Render` for a canvas based renderer.\n*\n* @class RenderPixi\n* @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n* It will likely be moved to its own repository (but maintenance will be limited).\n*/\n\nvar RenderPixi = {};\n\nmodule.exports = RenderPixi;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Events = _dereq_('../core/Events');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame \n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n    \n    /**\n     * Creates a new Pixi.js WebGL renderer\n     * @method create\n     * @param {object} options\n     * @return {RenderPixi} A new renderer\n     * @deprecated\n     */\n    RenderPixi.create = function(options) {\n        Common.warn('RenderPixi.create: Matter.RenderPixi is deprecated (see docs)');\n\n        var defaults = {\n            controller: RenderPixi,\n            engine: null,\n            element: null,\n            frameRequestId: null,\n            canvas: null,\n            renderer: null,\n            container: null,\n            spriteContainer: null,\n            pixiOptions: null,\n            options: {\n                width: 800,\n                height: 600,\n                background: '#fafafa',\n                wireframeBackground: '#222',\n                hasBounds: false,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false\n            }\n        };\n\n        var render = Common.extend(defaults, options),\n            transparent = !render.options.wireframes && render.options.background === 'transparent';\n\n        // init pixi\n        render.pixiOptions = render.pixiOptions || {\n            view: render.canvas,\n            transparent: transparent,\n            antialias: true,\n            backgroundColor: options.background\n        };\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.renderer = render.renderer || new PIXI.WebGLRenderer(render.options.width, render.options.height, render.pixiOptions);\n        render.container = render.container || new PIXI.Container();\n        render.spriteContainer = render.spriteContainer || new PIXI.Container();\n        render.canvas = render.canvas || render.renderer.view;\n        render.bounds = render.bounds || { \n            min: {\n                x: 0,\n                y: 0\n            }, \n            max: { \n                x: render.options.width,\n                y: render.options.height\n            }\n        };\n\n        // event listeners\n        Events.on(render.engine, 'beforeUpdate', function() {\n            RenderPixi.clear(render);\n        });\n\n        // caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // use a sprite batch for performance\n        render.container.addChild(render.spriteContainer);\n\n        // insert canvas\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else {\n            Common.warn('No \"render.element\" passed, \"render.canvas\" was not inserted into document.');\n        }\n\n        // prevent menus on canvas\n        render.canvas.oncontextmenu = function() { return false; };\n        render.canvas.onselectstart = function() { return false; };\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            RenderPixi.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Clears the scene graph\n     * @method clear\n     * @param {RenderPixi} render\n     * @deprecated\n     */\n    RenderPixi.clear = function(render) {\n        var container = render.container,\n            spriteContainer = render.spriteContainer;\n\n        // clear stage container\n        while (container.children[0]) { \n            container.removeChild(container.children[0]); \n        }\n\n        // clear sprite batch\n        while (spriteContainer.children[0]) { \n            spriteContainer.removeChild(spriteContainer.children[0]); \n        }\n\n        var bgSprite = render.sprites['bg-0'];\n\n        // clear caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // set background sprite\n        render.sprites['bg-0'] = bgSprite;\n        if (bgSprite)\n            container.addChildAt(bgSprite, 0);\n\n        // add sprite batch back into container\n        render.container.addChild(render.spriteContainer);\n\n        // reset background state\n        render.currentBackground = null;\n\n        // reset bounds transforms\n        container.scale.set(1, 1);\n        container.position.set(0, 0);\n    };\n\n    /**\n     * Sets the background of the canvas \n     * @method setBackground\n     * @param {RenderPixi} render\n     * @param {string} background\n     * @deprecated\n     */\n    RenderPixi.setBackground = function(render, background) {\n        if (render.currentBackground !== background) {\n            var isColor = background.indexOf && background.indexOf('#') !== -1,\n                bgSprite = render.sprites['bg-0'];\n\n            if (isColor) {\n                // if solid background color\n                var color = Common.colorToNumber(background);\n                render.renderer.backgroundColor = color;\n\n                // remove background sprite if existing\n                if (bgSprite)\n                    render.container.removeChild(bgSprite); \n            } else {\n                // initialise background sprite if needed\n                if (!bgSprite) {\n                    var texture = _getTexture(render, background);\n\n                    bgSprite = render.sprites['bg-0'] = new PIXI.Sprite(texture);\n                    bgSprite.position.x = 0;\n                    bgSprite.position.y = 0;\n                    render.container.addChildAt(bgSprite, 0);\n                }\n            }\n\n            render.currentBackground = background;\n        }\n    };\n\n    /**\n     * Description\n     * @method world\n     * @param {engine} engine\n     * @deprecated\n     */\n    RenderPixi.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            renderer = render.renderer,\n            container = render.container,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            constraints = [],\n            i;\n\n        if (options.wireframes) {\n            RenderPixi.setBackground(render, options.wireframeBackground);\n        } else {\n            RenderPixi.setBackground(render, options.background);\n        }\n\n        // handle bounds\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        if (options.hasBounds) {\n            // Hide bodies that are not in view\n            for (i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);\n            container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));\n        } else {\n            constraints = allConstraints;\n        }\n\n        for (i = 0; i < bodies.length; i++)\n            RenderPixi.body(render, bodies[i]);\n\n        for (i = 0; i < constraints.length; i++)\n            RenderPixi.constraint(render, constraints[i]);\n\n        renderer.render(container);\n    };\n\n\n    /**\n     * Description\n     * @method constraint\n     * @param {engine} engine\n     * @param {constraint} constraint\n     * @deprecated\n     */\n    RenderPixi.constraint = function(render, constraint) {\n        var engine = render.engine,\n            bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB,\n            container = render.container,\n            constraintRender = constraint.render,\n            primitiveId = 'c-' + constraint.id,\n            primitive = render.primitives[primitiveId];\n\n        // initialise constraint primitive if not existing\n        if (!primitive)\n            primitive = render.primitives[primitiveId] = new PIXI.Graphics();\n\n        // don't render if constraint does not have two end points\n        if (!constraintRender.visible || !constraint.pointA || !constraint.pointB) {\n            primitive.clear();\n            return;\n        }\n\n        // add to scene graph if not already there\n        if (Common.indexOf(container.children, primitive) === -1)\n            container.addChild(primitive);\n\n        // render the constraint on every update, since they can change dynamically\n        primitive.clear();\n        primitive.beginFill(0, 0);\n        primitive.lineStyle(constraintRender.lineWidth, Common.colorToNumber(constraintRender.strokeStyle), 1);\n        \n        if (bodyA) {\n            primitive.moveTo(bodyA.position.x + pointA.x, bodyA.position.y + pointA.y);\n        } else {\n            primitive.moveTo(pointA.x, pointA.y);\n        }\n\n        if (bodyB) {\n            primitive.lineTo(bodyB.position.x + pointB.x, bodyB.position.y + pointB.y);\n        } else {\n            primitive.lineTo(pointB.x, pointB.y);\n        }\n\n        primitive.endFill();\n    };\n    \n    /**\n     * Description\n     * @method body\n     * @param {engine} engine\n     * @param {body} body\n     * @deprecated\n     */\n    RenderPixi.body = function(render, body) {\n        var engine = render.engine,\n            bodyRender = body.render;\n\n        if (!bodyRender.visible)\n            return;\n\n        if (bodyRender.sprite && bodyRender.sprite.texture) {\n            var spriteId = 'b-' + body.id,\n                sprite = render.sprites[spriteId],\n                spriteContainer = render.spriteContainer;\n\n            // initialise body sprite if not existing\n            if (!sprite)\n                sprite = render.sprites[spriteId] = _createBodySprite(render, body);\n\n            // add to scene graph if not already there\n            if (Common.indexOf(spriteContainer.children, sprite) === -1)\n                spriteContainer.addChild(sprite);\n\n            // update body sprite\n            sprite.position.x = body.position.x;\n            sprite.position.y = body.position.y;\n            sprite.rotation = body.angle;\n            sprite.scale.x = bodyRender.sprite.xScale || 1;\n            sprite.scale.y = bodyRender.sprite.yScale || 1;\n        } else {\n            var primitiveId = 'b-' + body.id,\n                primitive = render.primitives[primitiveId],\n                container = render.container;\n\n            // initialise body primitive if not existing\n            if (!primitive) {\n                primitive = render.primitives[primitiveId] = _createBodyPrimitive(render, body);\n                primitive.initialAngle = body.angle;\n            }\n\n            // add to scene graph if not already there\n            if (Common.indexOf(container.children, primitive) === -1)\n                container.addChild(primitive);\n\n            // update body primitive\n            primitive.position.x = body.position.x;\n            primitive.position.y = body.position.y;\n            primitive.rotation = body.angle - primitive.initialAngle;\n        }\n    };\n\n    /**\n     * Creates a body sprite\n     * @method _createBodySprite\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Sprite} sprite\n     * @deprecated\n     */\n    var _createBodySprite = function(render, body) {\n        var bodyRender = body.render,\n            texturePath = bodyRender.sprite.texture,\n            texture = _getTexture(render, texturePath),\n            sprite = new PIXI.Sprite(texture);\n\n        sprite.anchor.x = body.render.sprite.xOffset;\n        sprite.anchor.y = body.render.sprite.yOffset;\n\n        return sprite;\n    };\n\n    /**\n     * Creates a body primitive\n     * @method _createBodyPrimitive\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Graphics} graphics\n     * @deprecated\n     */\n    var _createBodyPrimitive = function(render, body) {\n        var bodyRender = body.render,\n            options = render.options,\n            primitive = new PIXI.Graphics(),\n            fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n            strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleWireframe = Common.colorToNumber('#bbb'),\n            strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n            part;\n\n        primitive.clear();\n\n        // handle compound parts\n        for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n\n            if (!options.wireframes) {\n                primitive.beginFill(fillStyle, 1);\n                primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n                primitive.beginFill(0, 0);\n                primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            for (var j = 1; j < part.vertices.length; j++) {\n                primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            primitive.endFill();\n\n            // angle indicator\n            if (options.showAngleIndicator || options.showAxes) {\n                primitive.beginFill(0, 0);\n\n                if (options.wireframes) {\n                    primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n                } else {\n                    primitive.lineStyle(1, strokeStyleIndicator);\n                }\n\n                primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n                primitive.lineTo(((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2 - body.position.x), \n                                 ((part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2 - body.position.y));\n\n                primitive.endFill();\n            }\n        }\n\n        return primitive;\n    };\n\n    /**\n     * Gets the requested texture (a PIXI.Texture) via its path\n     * @method _getTexture\n     * @private\n     * @param {RenderPixi} render\n     * @param {string} imagePath\n     * @return {PIXI.Texture} texture\n     * @deprecated\n     */\n    var _getTexture = function(render, imagePath) {\n        var texture = render.textures[imagePath];\n\n        if (!texture)\n            texture = render.textures[imagePath] = PIXI.Texture.fromImage(imagePath);\n\n        return texture;\n    };\n\n})();\n\n},{\"../body/Composite\":2,\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}]},{},[30])(30)\n});\n","/* Web Font Loader v1.6.28 - (c) Adobe Systems, Google. License: Apache 2.0 */(function(){function aa(a,b,c){return a.call.apply(a.bind,arguments)}function ba(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function p(a,b,c){p=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf(\"native code\")?aa:ba;return p.apply(null,arguments)}var q=Date.now||function(){return+new Date};function ca(a,b){this.a=a;this.o=b||a;this.c=this.o.document}var da=!!window.FontFace;function t(a,b,c,d){b=a.c.createElement(b);if(c)for(var e in c)c.hasOwnProperty(e)&&(\"style\"==e?b.style.cssText=c[e]:b.setAttribute(e,c[e]));d&&b.appendChild(a.c.createTextNode(d));return b}function u(a,b,c){a=a.c.getElementsByTagName(b)[0];a||(a=document.documentElement);a.insertBefore(c,a.lastChild)}function v(a){a.parentNode&&a.parentNode.removeChild(a)}\nfunction w(a,b,c){b=b||[];c=c||[];for(var d=a.className.split(/\\s+/),e=0;e<b.length;e+=1){for(var f=!1,g=0;g<d.length;g+=1)if(b[e]===d[g]){f=!0;break}f||d.push(b[e])}b=[];for(e=0;e<d.length;e+=1){f=!1;for(g=0;g<c.length;g+=1)if(d[e]===c[g]){f=!0;break}f||b.push(d[e])}a.className=b.join(\" \").replace(/\\s+/g,\" \").replace(/^\\s+|\\s+$/,\"\")}function y(a,b){for(var c=a.className.split(/\\s+/),d=0,e=c.length;d<e;d++)if(c[d]==b)return!0;return!1}\nfunction ea(a){return a.o.location.hostname||a.a.location.hostname}function z(a,b,c){function d(){m&&e&&f&&(m(g),m=null)}b=t(a,\"link\",{rel:\"stylesheet\",href:b,media:\"all\"});var e=!1,f=!0,g=null,m=c||null;da?(b.onload=function(){e=!0;d()},b.onerror=function(){e=!0;g=Error(\"Stylesheet failed to load\");d()}):setTimeout(function(){e=!0;d()},0);u(a,\"head\",b)}\nfunction A(a,b,c,d){var e=a.c.getElementsByTagName(\"head\")[0];if(e){var f=t(a,\"script\",{src:b}),g=!1;f.onload=f.onreadystatechange=function(){g||this.readyState&&\"loaded\"!=this.readyState&&\"complete\"!=this.readyState||(g=!0,c&&c(null),f.onload=f.onreadystatechange=null,\"HEAD\"==f.parentNode.tagName&&e.removeChild(f))};e.appendChild(f);setTimeout(function(){g||(g=!0,c&&c(Error(\"Script load timeout\")))},d||5E3);return f}return null};function B(){this.a=0;this.c=null}function C(a){a.a++;return function(){a.a--;D(a)}}function E(a,b){a.c=b;D(a)}function D(a){0==a.a&&a.c&&(a.c(),a.c=null)};function F(a){this.a=a||\"-\"}F.prototype.c=function(a){for(var b=[],c=0;c<arguments.length;c++)b.push(arguments[c].replace(/[\\W_]+/g,\"\").toLowerCase());return b.join(this.a)};function G(a,b){this.c=a;this.f=4;this.a=\"n\";var c=(b||\"n4\").match(/^([nio])([1-9])$/i);c&&(this.a=c[1],this.f=parseInt(c[2],10))}function fa(a){return H(a)+\" \"+(a.f+\"00\")+\" 300px \"+I(a.c)}function I(a){var b=[];a=a.split(/,\\s*/);for(var c=0;c<a.length;c++){var d=a[c].replace(/['\"]/g,\"\");-1!=d.indexOf(\" \")||/^\\d/.test(d)?b.push(\"'\"+d+\"'\"):b.push(d)}return b.join(\",\")}function J(a){return a.a+a.f}function H(a){var b=\"normal\";\"o\"===a.a?b=\"oblique\":\"i\"===a.a&&(b=\"italic\");return b}\nfunction ga(a){var b=4,c=\"n\",d=null;a&&((d=a.match(/(normal|oblique|italic)/i))&&d[1]&&(c=d[1].substr(0,1).toLowerCase()),(d=a.match(/([1-9]00|normal|bold)/i))&&d[1]&&(/bold/i.test(d[1])?b=7:/[1-9]00/.test(d[1])&&(b=parseInt(d[1].substr(0,1),10))));return c+b};function ha(a,b){this.c=a;this.f=a.o.document.documentElement;this.h=b;this.a=new F(\"-\");this.j=!1!==b.events;this.g=!1!==b.classes}function ia(a){a.g&&w(a.f,[a.a.c(\"wf\",\"loading\")]);K(a,\"loading\")}function L(a){if(a.g){var b=y(a.f,a.a.c(\"wf\",\"active\")),c=[],d=[a.a.c(\"wf\",\"loading\")];b||c.push(a.a.c(\"wf\",\"inactive\"));w(a.f,c,d)}K(a,\"inactive\")}function K(a,b,c){if(a.j&&a.h[b])if(c)a.h[b](c.c,J(c));else a.h[b]()};function ja(){this.c={}}function ka(a,b,c){var d=[],e;for(e in b)if(b.hasOwnProperty(e)){var f=a.c[e];f&&d.push(f(b[e],c))}return d};function M(a,b){this.c=a;this.f=b;this.a=t(this.c,\"span\",{\"aria-hidden\":\"true\"},this.f)}function N(a){u(a.c,\"body\",a.a)}function O(a){return\"display:block;position:absolute;top:-9999px;left:-9999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:\"+I(a.c)+\";\"+(\"font-style:\"+H(a)+\";font-weight:\"+(a.f+\"00\")+\";\")};function P(a,b,c,d,e,f){this.g=a;this.j=b;this.a=d;this.c=c;this.f=e||3E3;this.h=f||void 0}P.prototype.start=function(){var a=this.c.o.document,b=this,c=q(),d=new Promise(function(d,e){function f(){q()-c>=b.f?e():a.fonts.load(fa(b.a),b.h).then(function(a){1<=a.length?d():setTimeout(f,25)},function(){e()})}f()}),e=null,f=new Promise(function(a,d){e=setTimeout(d,b.f)});Promise.race([f,d]).then(function(){e&&(clearTimeout(e),e=null);b.g(b.a)},function(){b.j(b.a)})};function Q(a,b,c,d,e,f,g){this.v=a;this.B=b;this.c=c;this.a=d;this.s=g||\"BESbswy\";this.f={};this.w=e||3E3;this.u=f||null;this.m=this.j=this.h=this.g=null;this.g=new M(this.c,this.s);this.h=new M(this.c,this.s);this.j=new M(this.c,this.s);this.m=new M(this.c,this.s);a=new G(this.a.c+\",serif\",J(this.a));a=O(a);this.g.a.style.cssText=a;a=new G(this.a.c+\",sans-serif\",J(this.a));a=O(a);this.h.a.style.cssText=a;a=new G(\"serif\",J(this.a));a=O(a);this.j.a.style.cssText=a;a=new G(\"sans-serif\",J(this.a));a=\nO(a);this.m.a.style.cssText=a;N(this.g);N(this.h);N(this.j);N(this.m)}var R={D:\"serif\",C:\"sans-serif\"},S=null;function T(){if(null===S){var a=/AppleWebKit\\/([0-9]+)(?:\\.([0-9]+))/.exec(window.navigator.userAgent);S=!!a&&(536>parseInt(a[1],10)||536===parseInt(a[1],10)&&11>=parseInt(a[2],10))}return S}Q.prototype.start=function(){this.f.serif=this.j.a.offsetWidth;this.f[\"sans-serif\"]=this.m.a.offsetWidth;this.A=q();U(this)};\nfunction la(a,b,c){for(var d in R)if(R.hasOwnProperty(d)&&b===a.f[R[d]]&&c===a.f[R[d]])return!0;return!1}function U(a){var b=a.g.a.offsetWidth,c=a.h.a.offsetWidth,d;(d=b===a.f.serif&&c===a.f[\"sans-serif\"])||(d=T()&&la(a,b,c));d?q()-a.A>=a.w?T()&&la(a,b,c)&&(null===a.u||a.u.hasOwnProperty(a.a.c))?V(a,a.v):V(a,a.B):ma(a):V(a,a.v)}function ma(a){setTimeout(p(function(){U(this)},a),50)}function V(a,b){setTimeout(p(function(){v(this.g.a);v(this.h.a);v(this.j.a);v(this.m.a);b(this.a)},a),0)};function W(a,b,c){this.c=a;this.a=b;this.f=0;this.m=this.j=!1;this.s=c}var X=null;W.prototype.g=function(a){var b=this.a;b.g&&w(b.f,[b.a.c(\"wf\",a.c,J(a).toString(),\"active\")],[b.a.c(\"wf\",a.c,J(a).toString(),\"loading\"),b.a.c(\"wf\",a.c,J(a).toString(),\"inactive\")]);K(b,\"fontactive\",a);this.m=!0;na(this)};\nW.prototype.h=function(a){var b=this.a;if(b.g){var c=y(b.f,b.a.c(\"wf\",a.c,J(a).toString(),\"active\")),d=[],e=[b.a.c(\"wf\",a.c,J(a).toString(),\"loading\")];c||d.push(b.a.c(\"wf\",a.c,J(a).toString(),\"inactive\"));w(b.f,d,e)}K(b,\"fontinactive\",a);na(this)};function na(a){0==--a.f&&a.j&&(a.m?(a=a.a,a.g&&w(a.f,[a.a.c(\"wf\",\"active\")],[a.a.c(\"wf\",\"loading\"),a.a.c(\"wf\",\"inactive\")]),K(a,\"active\")):L(a.a))};function oa(a){this.j=a;this.a=new ja;this.h=0;this.f=this.g=!0}oa.prototype.load=function(a){this.c=new ca(this.j,a.context||this.j);this.g=!1!==a.events;this.f=!1!==a.classes;pa(this,new ha(this.c,a),a)};\nfunction qa(a,b,c,d,e){var f=0==--a.h;(a.f||a.g)&&setTimeout(function(){var a=e||null,m=d||null||{};if(0===c.length&&f)L(b.a);else{b.f+=c.length;f&&(b.j=f);var h,l=[];for(h=0;h<c.length;h++){var k=c[h],n=m[k.c],r=b.a,x=k;r.g&&w(r.f,[r.a.c(\"wf\",x.c,J(x).toString(),\"loading\")]);K(r,\"fontloading\",x);r=null;if(null===X)if(window.FontFace){var x=/Gecko.*Firefox\\/(\\d+)/.exec(window.navigator.userAgent),xa=/OS X.*Version\\/10\\..*Safari/.exec(window.navigator.userAgent)&&/Apple/.exec(window.navigator.vendor);\nX=x?42<parseInt(x[1],10):xa?!1:!0}else X=!1;X?r=new P(p(b.g,b),p(b.h,b),b.c,k,b.s,n):r=new Q(p(b.g,b),p(b.h,b),b.c,k,b.s,a,n);l.push(r)}for(h=0;h<l.length;h++)l[h].start()}},0)}function pa(a,b,c){var d=[],e=c.timeout;ia(b);var d=ka(a.a,c,a.c),f=new W(a.c,b,e);a.h=d.length;b=0;for(c=d.length;b<c;b++)d[b].load(function(b,d,c){qa(a,f,b,d,c)})};function ra(a,b){this.c=a;this.a=b}\nra.prototype.load=function(a){function b(){if(f[\"__mti_fntLst\"+d]){var c=f[\"__mti_fntLst\"+d](),e=[],h;if(c)for(var l=0;l<c.length;l++){var k=c[l].fontfamily;void 0!=c[l].fontStyle&&void 0!=c[l].fontWeight?(h=c[l].fontStyle+c[l].fontWeight,e.push(new G(k,h))):e.push(new G(k))}a(e)}else setTimeout(function(){b()},50)}var c=this,d=c.a.projectId,e=c.a.version;if(d){var f=c.c.o;A(this.c,(c.a.api||\"https://fast.fonts.net/jsapi\")+\"/\"+d+\".js\"+(e?\"?v=\"+e:\"\"),function(e){e?a([]):(f[\"__MonotypeConfiguration__\"+\nd]=function(){return c.a},b())}).id=\"__MonotypeAPIScript__\"+d}else a([])};function sa(a,b){this.c=a;this.a=b}sa.prototype.load=function(a){var b,c,d=this.a.urls||[],e=this.a.families||[],f=this.a.testStrings||{},g=new B;b=0;for(c=d.length;b<c;b++)z(this.c,d[b],C(g));var m=[];b=0;for(c=e.length;b<c;b++)if(d=e[b].split(\":\"),d[1])for(var h=d[1].split(\",\"),l=0;l<h.length;l+=1)m.push(new G(d[0],h[l]));else m.push(new G(d[0]));E(g,function(){a(m,f)})};function ta(a,b){a?this.c=a:this.c=ua;this.a=[];this.f=[];this.g=b||\"\"}var ua=\"https://fonts.googleapis.com/css\";function va(a,b){for(var c=b.length,d=0;d<c;d++){var e=b[d].split(\":\");3==e.length&&a.f.push(e.pop());var f=\"\";2==e.length&&\"\"!=e[1]&&(f=\":\");a.a.push(e.join(f))}}\nfunction wa(a){if(0==a.a.length)throw Error(\"No fonts to load!\");if(-1!=a.c.indexOf(\"kit=\"))return a.c;for(var b=a.a.length,c=[],d=0;d<b;d++)c.push(a.a[d].replace(/ /g,\"+\"));b=a.c+\"?family=\"+c.join(\"%7C\");0<a.f.length&&(b+=\"&subset=\"+a.f.join(\",\"));0<a.g.length&&(b+=\"&text=\"+encodeURIComponent(a.g));return b};function ya(a){this.f=a;this.a=[];this.c={}}\nvar za={latin:\"BESbswy\",\"latin-ext\":\"\\u00e7\\u00f6\\u00fc\\u011f\\u015f\",cyrillic:\"\\u0439\\u044f\\u0416\",greek:\"\\u03b1\\u03b2\\u03a3\",khmer:\"\\u1780\\u1781\\u1782\",Hanuman:\"\\u1780\\u1781\\u1782\"},Aa={thin:\"1\",extralight:\"2\",\"extra-light\":\"2\",ultralight:\"2\",\"ultra-light\":\"2\",light:\"3\",regular:\"4\",book:\"4\",medium:\"5\",\"semi-bold\":\"6\",semibold:\"6\",\"demi-bold\":\"6\",demibold:\"6\",bold:\"7\",\"extra-bold\":\"8\",extrabold:\"8\",\"ultra-bold\":\"8\",ultrabold:\"8\",black:\"9\",heavy:\"9\",l:\"3\",r:\"4\",b:\"7\"},Ba={i:\"i\",italic:\"i\",n:\"n\",normal:\"n\"},\nCa=/^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$/;\nfunction Da(a){for(var b=a.f.length,c=0;c<b;c++){var d=a.f[c].split(\":\"),e=d[0].replace(/\\+/g,\" \"),f=[\"n4\"];if(2<=d.length){var g;var m=d[1];g=[];if(m)for(var m=m.split(\",\"),h=m.length,l=0;l<h;l++){var k;k=m[l];if(k.match(/^[\\w-]+$/)){var n=Ca.exec(k.toLowerCase());if(null==n)k=\"\";else{k=n[2];k=null==k||\"\"==k?\"n\":Ba[k];n=n[1];if(null==n||\"\"==n)n=\"4\";else var r=Aa[n],n=r?r:isNaN(n)?\"4\":n.substr(0,1);k=[k,n].join(\"\")}}else k=\"\";k&&g.push(k)}0<g.length&&(f=g);3==d.length&&(d=d[2],g=[],d=d?d.split(\",\"):\ng,0<d.length&&(d=za[d[0]])&&(a.c[e]=d))}a.c[e]||(d=za[e])&&(a.c[e]=d);for(d=0;d<f.length;d+=1)a.a.push(new G(e,f[d]))}};function Ea(a,b){this.c=a;this.a=b}var Fa={Arimo:!0,Cousine:!0,Tinos:!0};Ea.prototype.load=function(a){var b=new B,c=this.c,d=new ta(this.a.api,this.a.text),e=this.a.families;va(d,e);var f=new ya(e);Da(f);z(c,wa(d),C(b));E(b,function(){a(f.a,f.c,Fa)})};function Ga(a,b){this.c=a;this.a=b}Ga.prototype.load=function(a){var b=this.a.id,c=this.c.o;b?A(this.c,(this.a.api||\"https://use.typekit.net\")+\"/\"+b+\".js\",function(b){if(b)a([]);else if(c.Typekit&&c.Typekit.config&&c.Typekit.config.fn){b=c.Typekit.config.fn;for(var e=[],f=0;f<b.length;f+=2)for(var g=b[f],m=b[f+1],h=0;h<m.length;h++)e.push(new G(g,m[h]));try{c.Typekit.load({events:!1,classes:!1,async:!0})}catch(l){}a(e)}},2E3):a([])};function Ha(a,b){this.c=a;this.f=b;this.a=[]}Ha.prototype.load=function(a){var b=this.f.id,c=this.c.o,d=this;b?(c.__webfontfontdeckmodule__||(c.__webfontfontdeckmodule__={}),c.__webfontfontdeckmodule__[b]=function(b,c){for(var g=0,m=c.fonts.length;g<m;++g){var h=c.fonts[g];d.a.push(new G(h.name,ga(\"font-weight:\"+h.weight+\";font-style:\"+h.style)))}a(d.a)},A(this.c,(this.f.api||\"https://f.fontdeck.com/s/css/js/\")+ea(this.c)+\"/\"+b+\".js\",function(b){b&&a([])})):a([])};var Y=new oa(window);Y.a.c.custom=function(a,b){return new sa(b,a)};Y.a.c.fontdeck=function(a,b){return new Ha(b,a)};Y.a.c.monotype=function(a,b){return new ra(b,a)};Y.a.c.typekit=function(a,b){return new Ga(b,a)};Y.a.c.google=function(a,b){return new Ea(b,a)};var Z={load:p(Y.load,Y)};\"function\"===typeof define&&define.amd?define(function(){return Z}):\"undefined\"!==typeof module&&module.exports?module.exports=Z:(window.WebFont=Z,window.WebFontConfig&&Y.load(window.WebFontConfig));}());\n","// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=e():\"function\"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel(\"FPS\",\"#0ff\",\"#002\")),h=e(new f.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var t=e(new f.Panel(\"MB\",\"#f08\",\"#201\"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=h;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+\" \"+e+\" (\"+g(c)+\"-\"+g(k)+\")\",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n","/**\n* matter-js 0.14.2 by @liabru 2018-06-11\n* http://brm.io/matter-js/\n* License MIT\n*/\n\n/**\n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Matter = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(_dereq_,module,exports){\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Render = _dereq_('../render/Render');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                },\n                lineWidth: 0\n            }\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#2e2b44' : Common.choose(['#006BA6', '#0496FF', '#FFBC42', '#D81159', '#8F2D56'])),\n            defaultStrokeStyle = '#000';\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            value = settings[property];\n\n            if (!settings.hasOwnProperty(property))\n                continue;\n\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                delete part._original;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n     /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n     /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31}],2:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n* A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n* It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n* Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = _dereq_('../core/Events');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Body = _dereq_('./Body');\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {}\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for(var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {} object\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n                        .concat(Composite.allConstraints(composite))\n                        .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n     * If you need to change it manually, you should use the `Composite.setModified` method.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"./Body\":1}],3:[function(_dereq_,module,exports){\n/**\n* The `Matter.World` module contains methods for creating and manipulating the world composite.\n* A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n* A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n* It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n* There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class World\n* @extends Composite\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = _dereq_('./Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @constructor\n     * @param {} options\n     * @return {world} A new world\n     */\n    World.create = function(options) {\n        var composite = Composite.create();\n\n        var defaults = {\n            label: 'World',\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            bounds: { \n                min: { x: -Infinity, y: -Infinity }, \n                max: { x: Infinity, y: Infinity } \n            }\n        };\n        \n        return Common.extend(composite, defaults, options);\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The gravity to apply on the world.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n    /**\n     * A `Bounds` object that defines the world bounds for collision detection.\n     *\n     * @property bounds\n     * @type bounds\n     * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\n     */\n\n    // World is a Composite body\n    // see src/module/Outro.js for these aliases:\n    \n    /**\n     * An alias for Composite.add\n     * @method add\n     * @param {world} world\n     * @param {} object\n     * @return {composite} The original world with the objects added\n     */\n\n    /**\n     * An alias for Composite.remove\n     * @method remove\n     * @param {world} world\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original world with the objects removed\n     */\n\n    /**\n     * An alias for Composite.clear\n     * @method clear\n     * @param {world} world\n     * @param {boolean} keepStatic\n     */\n\n    /**\n     * An alias for Composite.addComposite\n     * @method addComposite\n     * @param {world} world\n     * @param {composite} composite\n     * @return {world} The original world with the objects from composite added\n     */\n    \n     /**\n      * An alias for Composite.addBody\n      * @method addBody\n      * @param {world} world\n      * @param {body} body\n      * @return {world} The original world with the body added\n      */\n\n     /**\n      * An alias for Composite.addConstraint\n      * @method addConstraint\n      * @param {world} world\n      * @param {constraint} constraint\n      * @return {world} The original world with the constraint added\n      */\n\n})();\n\n},{\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Composite\":2}],4:[function(_dereq_,module,exports){\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n    \n    /**\n     * Generates a contact id.\n     * @method id\n     * @param {vertex} vertex\n     * @return {string} Unique contactID\n     */\n    Contact.id = function(vertex) {\n        return vertex.body.id + '_' + vertex.index;\n    };\n\n})();\n\n},{}],5:[function(_dereq_,module,exports){\n/**\n* The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n*\n* @class Detector\n*/\n\n// TODO: speculative contacts\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar SAT = _dereq_('./SAT');\nvar Pair = _dereq_('./Pair');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Finds all collisions given a list of pairs.\n     * @method collisions\n     * @param {pair[]} broadphasePairs\n     * @param {engine} engine\n     * @return {array} collisions\n     */\n    Detector.collisions = function(broadphasePairs, engine) {\n        var collisions = [],\n            pairsTable = engine.pairs.table;\n\n        \n        for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0], \n                bodyB = broadphasePairs[i][1];\n\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping))\n                continue;\n            \n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\n                continue;\n\n\n            // mid phase\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n                for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                    var partA = bodyA.parts[j];\n\n                    for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                        var partB = bodyB.parts[k];\n\n                        if ((partA === bodyA && partB === bodyB) || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                            // find a previous collision we could reuse\n                            var pairId = Pair.id(partA, partB),\n                                pair = pairsTable[pairId],\n                                previousCollision;\n\n                            if (pair && pair.isActive) {\n                                previousCollision = pair.collision;\n                            } else {\n                                previousCollision = null;\n                            }\n\n                            // narrow phase\n                            var collision = SAT.collides(partA, partB, previousCollision);\n\n\n                            if (collision.collided) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n})();\n\n},{\"../geometry/Bounds\":26,\"./Pair\":7,\"./SAT\":11}],6:[function(_dereq_,module,exports){\n/**\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = _dereq_('./Pair');\nvar Detector = _dereq_('./Detector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            controller: Grid,\n            detector: Detector.collisions,\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // don't update out of world bodies\n            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    /**\n     * Clears the grid.\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        // add new pairs\n        for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                grid.pairs[pairId] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        // update pair counts\n        for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pairKeys,\n            pair,\n            pairs = [];\n\n        // grid.pairs is used as a hashmap\n        pairKeys = Common.keys(grid.pairs);\n\n        // iterate over grid.pairs\n        for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete grid.pairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n},{\"../core/Common\":14,\"./Detector\":5,\"./Pair\":7}],7:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = _dereq_('./Contact');\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n        \n        pair.collision = collision;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = Math.min(parentA.friction, parentB.friction);\n        pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n        pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n        pair.slop = Math.max(parentA.slop, parentB.slop);\n        activeContacts.length = 0;\n        \n        if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n                var support = supports[i],\n                    contactId = Contact.id(support),\n                    contact = contacts[contactId];\n\n                if (contact) {\n                    activeContacts.push(contact);\n                } else {\n                    activeContacts.push(contacts[contactId] = Contact.create(support));\n                }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n        } else {\n            if (pair.isActive === true)\n                Pair.setActive(pair, false, timestamp);\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n},{\"./Contact\":4}],8:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = _dereq_('./Pair');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n    \n    Pairs._pairMaxIdleLife = 1000;\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            activePairIds = [],\n            collision,\n            pairId,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n                pairId = Pair.id(collision.bodyA, collision.bodyB);\n                activePairIds.push(pairId);\n\n                pair = pairsTable[pairId];\n                \n                if (pair) {\n                    // pair already exists (but may or may not be active)\n                    if (pair.isActive) {\n                        // pair exists and is active\n                        collisionActive.push(pair);\n                    } else {\n                        // pair exists but was inactive, so a collision has just started again\n                        collisionStart.push(pair);\n                    }\n\n                    // update the pair\n                    Pair.update(pair, collision, timestamp);\n                } else {\n                    // pair did not exist, create a new pair\n                    pair = Pair.create(collision, timestamp);\n                    pairsTable[pairId] = pair;\n\n                    // push the new pair\n                    collisionStart.push(pair);\n                    pairsList.push(pair);\n                }\n            }\n        }\n\n        // deactivate previously active pairs that are now inactive\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            if (pair.isActive && Common.indexOf(activePairIds, pair.id) === -1) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n            }\n        }\n    };\n    \n    /**\n     * Finds and removes pairs that have been inactive for a set amount of time.\n     * @method removeOld\n     * @param {object} pairs\n     * @param {number} timestamp\n     */\n    Pairs.removeOld = function(pairs, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            indexesToRemove = [],\n            pair,\n            collision,\n            pairIndex,\n            i;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision;\n            \n            // never remove sleeping pairs\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n                pair.timeUpdated = timestamp;\n                continue;\n            }\n\n            // if pair is inactive for too long, mark it to be removed\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\n                indexesToRemove.push(i);\n            }\n        }\n\n        // remove marked pairs\n        for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n},{\"../core/Common\":14,\"./Pair\":7}],9:[function(_dereq_,module,exports){\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar SAT = _dereq_('./SAT');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Bodies = _dereq_('../factory/Bodies');\nvar Vertices = _dereq_('../geometry/Vertices');\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {object[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n            \n            if (Bounds.overlaps(bodyA.bounds, body.bounds)) {\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (Bounds.overlaps(part.bounds, body.bounds)) {\n                        var collision = SAT.collides(part, body);\n\n                        if (collision.collided) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {object[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n},{\"../factory/Bodies\":23,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"./SAT\":11}],10:[function(_dereq_,module,exports){\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount;\n\n        // find total contacts on each body\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            bodyBtoA,\n            contactShare,\n            positionImpulse,\n            contactCount = {},\n            tempA = Vector._temp[0],\n            tempB = Vector._temp[1],\n            tempC = Vector._temp[2],\n            tempD = Vector._temp[3];\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), \n                                    Vector.add(bodyA.positionImpulse, \n                                        Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n\n            pair.separation = Vector.dot(normal, bodyBtoA);\n        }\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    Vertices.translate(part.vertices, body.positionImpulse);\n                    Bounds.update(part.bounds, part.vertices, body.velocity);\n                    part.position.x += body.positionImpulse.x;\n                    part.position.y += body.positionImpulse.y;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += body.positionImpulse.x;\n                body.positionPrev.y += body.positionImpulse.y;\n\n                if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    body.positionImpulse.x = 0;\n                    body.positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    body.positionImpulse.x *= Resolver._positionWarming;\n                    body.positionImpulse.y *= Resolver._positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var i,\n            j,\n            pair,\n            contacts,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            tangent,\n            contact,\n            contactVertex,\n            normalImpulse,\n            tangentImpulse,\n            offset,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1];\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent;\n\n            // resolve each contact\n            for (j = 0; j < contacts.length; j++) {\n                contact = contacts[j];\n                contactVertex = contact.vertex;\n                normalImpulse = contact.normalImpulse;\n                tangentImpulse = contact.tangentImpulse;\n\n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                    impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                        bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                        bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                    }\n\n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                        bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                        bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1],\n            tempB = Vector._temp[2],\n            tempC = Vector._temp[3],\n            tempD = Vector._temp[4],\n            tempE = Vector._temp[5];\n        \n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length;\n\n            // update body velocities\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (var j = 0; j < contacts.length; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                    offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                    velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                    velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD), \n                    relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                    normalVelocity = Vector.dot(normal, relativeVelocity);\n\n                var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                    tangentSpeed = Math.abs(tangentVelocity),\n                    tangentVelocityDirection = Common.sign(tangentVelocity);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                    normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier;\n\n                // coulomb friction\n                var tangentImpulse = tangentVelocity,\n                    maxFriction = Infinity;\n\n                if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                    maxFriction = tangentSpeed;\n                    tangentImpulse = Common.clamp(\n                        pair.friction * tangentVelocityDirection * timeScaleSquared,\n                        -maxFriction, maxFriction\n                    );\n                }\n\n                // modify impulses accounting for mass, inertia and offset\n                var oAcN = Vector.cross(offsetA, normal),\n                    oBcN = Vector.cross(offsetB, normal),\n                    share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN  + bodyB.inverseInertia * oBcN * oBcN);\n\n                normalImpulse *= share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                    bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                    bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],11:[function(_dereq_,module,exports){\n/**\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n*/\n\n// TODO: true circles and curves\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {collision} previousCollision\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB, previousCollision) {\n        var overlapAB,\n            overlapBA, \n            minOverlap,\n            collision,\n            canReusePrevCol = false;\n\n        if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed\n                       + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed;\n\n            // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2;\n\n            // reuse collision object\n            collision = previousCollision;\n        } else {\n            collision = { collided: false, bodyA: bodyA, bodyB: bodyB };\n        }\n\n        if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[previousCollision.axisNumber]];\n\n            minOverlap = SAT._overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n        } else {\n            // if we can't reuse a result, perform a full SAT test\n\n            overlapAB = SAT._overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            overlapBA = SAT._overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n                minOverlap = overlapAB;\n                collision.axisBody = bodyA;\n            } else {\n                minOverlap = overlapBA;\n                collision.axisBody = bodyB;\n            }\n\n            // important for reuse later\n            collision.axisNumber = minOverlap.axisNumber;\n        }\n\n        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n        collision.collided = true;\n        collision.depth = minOverlap.overlap;\n        collision.parentA = collision.bodyA.parent;\n        collision.parentB = collision.bodyB.parent;\n        \n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        // ensure normal is facing away from bodyA\n        if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n                x: minOverlap.axis.x,\n                y: minOverlap.axis.y\n            };\n        } else {\n            collision.normal = {\n                x: -minOverlap.axis.x,\n                y: -minOverlap.axis.y\n            };\n        }\n\n        collision.tangent = Vector.perp(collision.normal);\n\n        collision.penetration = collision.penetration || {};\n        collision.penetration.x = collision.normal.x * collision.depth;\n        collision.penetration.y = collision.normal.y * collision.depth; \n\n        // find support points, there is always either exactly one or two\n        var verticesB = SAT._findSupports(bodyA, bodyB, collision.normal),\n            supports = [];\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, verticesB[0]))\n            supports.push(verticesB[0]);\n\n        if (Vertices.contains(bodyA.vertices, verticesB[1]))\n            supports.push(verticesB[1]);\n\n        // find the supports from bodyA that are inside bodyB\n        if (supports.length < 2) {\n            var verticesA = SAT._findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n                \n            if (Vertices.contains(bodyB.vertices, verticesA[0]))\n                supports.push(verticesA[0]);\n\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1]))\n                supports.push(verticesA[1]);\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supports.length < 1)\n            supports = [verticesB[0]];\n        \n        collision.supports = supports;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {} verticesA\n     * @param {} verticesB\n     * @param {} axes\n     * @return result\n     */\n    SAT._overlapAxes = function(verticesA, verticesB, axes) {\n        var projectionA = Vector._temp[0], \n            projectionB = Vector._temp[1],\n            result = { overlap: Number.MAX_VALUE },\n            overlap,\n            axis;\n\n        for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            SAT._projectToAxis(projectionA, verticesA, axis);\n            SAT._projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n                result.overlap = overlap;\n                return result;\n            }\n\n            if (overlap < result.overlap) {\n                result.overlap = overlap;\n                result.axis = axis;\n                result.axisNumber = i;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    SAT._projectToAxis = function(projection, vertices, axis) {\n        var min = Vector.dot(vertices[0], axis),\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n    \n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {} bodyA\n     * @param {} bodyB\n     * @param {} normal\n     * @return [vector]\n     */\n    SAT._findSupports = function(bodyA, bodyB, normal) {\n        var nearestDistance = Number.MAX_VALUE,\n            vertexToBody = Vector._temp[0],\n            vertices = bodyB.vertices,\n            bodyAPosition = bodyA.position,\n            distance,\n            vertex,\n            vertexA,\n            vertexB;\n\n        // find closest vertex on bodyB\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertex;\n            }\n        }\n\n        // find next closest vertex using the two connected to it\n        var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n        vertex = vertices[prevIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        nearestDistance = -Vector.dot(normal, vertexToBody);\n        vertexB = vertex;\n\n        var nextIndex = (vertexA.index + 1) % vertices.length;\n        vertex = vertices[nextIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        distance = -Vector.dot(normal, vertexToBody);\n        if (distance < nearestDistance) {\n            vertexB = vertex;\n        }\n\n        return [vertexA, vertexB];\n    };\n\n})();\n\n},{\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],12:[function(_dereq_,module,exports){\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],13:[function(_dereq_,module,exports){\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Mouse = _dereq_('../core/Mouse');\nvar Events = _dereq_('../core/Events');\nvar Detector = _dereq_('../collision/Detector');\nvar Constraint = _dereq_('./Constraint');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Detector\":5,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../core/Sleeping\":22,\"../geometry/Bounds\":26,\"../geometry/Vertices\":29,\"./Constraint\":12}],14:[function(_dereq_,module,exports){\n(function (global){\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n\n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result will be high-resolution including decimal places if available.\n     * @method now\n     * @return {number} the current timestamp\n     */\n    Common.now = function() {\n        if (window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Used to require external libraries outside of the bundle.\n     * It first looks for the `globalName` on the environment's global namespace.\n     * If the global is not found, it will fall back to using the standard `require` using the `moduleName`.\n     * @private\n     * @method _requireGlobal\n     * @param {string} globalName The global module name\n     * @param {string} moduleName The fallback CommonJS module name\n     * @return {} The loaded module\n     */\n    Common._requireGlobal = function(globalName, moduleName) {\n        var obj = (typeof window !== 'undefined' ? window[globalName] : typeof global !== 'undefined' ? global[globalName] : null);\n        return obj || _dereq_(moduleName);\n    };\n})();\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],15:[function(_dereq_,module,exports){\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar World = _dereq_('../body/World');\nvar Sleeping = _dereq_('./Sleeping');\nvar Resolver = _dereq_('../collision/Resolver');\nvar Render = _dereq_('../render/Render');\nvar Pairs = _dereq_('../collision/Pairs');\nvar Metrics = _dereq_('./Metrics');\nvar Grid = _dereq_('../collision/Grid');\nvar Events = _dereq_('./Events');\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('./Common');\nvar Body = _dereq_('../body/Body');\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(element, options) {\n        // options may be passed as the first (and only) argument\n        options = Common.isElement(element) ? options : element;\n        element = Common.isElement(element) ? element : null;\n        options = options || {};\n\n        if (element || options.render) {\n            Common.warn('Engine.create: engine.render is deprecated (see docs)');\n        }\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            timing: {\n                timestamp: 0,\n                timeScale: 1\n            },\n            broadphase: {\n                controller: Grid\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        // @deprecated\n        if (element || engine.render) {\n            var renderDefaults = {\n                element: element,\n                controller: Render\n            };\n            \n            engine.render = Common.extend(renderDefaults, engine.render);\n        }\n\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            engine.render = engine.render.controller.create(engine.render);\n        }\n\n        // @deprecated\n        if (engine.render) {\n            engine.render.engine = engine;\n        }\n\n        engine.world = options.world || World.create(engine.world);\n        engine.pairs = Pairs.create();\n        engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\n        engine.metrics = engine.metrics || { extended: false };\n\n\n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            timing = engine.timing,\n            broadphase = engine.broadphase,\n            broadphasePairs = [],\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get lists of all bodies and constraints, no matter what composites they are in\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n\n        // if sleeping enabled, call the sleeping controller\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // applies gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, world.gravity);\n\n        // update all body position and rotation by integration\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // broadphase pass: find potential collision pairs\n        if (broadphase.controller) {\n            // if world is dirty, we must flush the whole grid\n            if (world.isModified)\n                broadphase.controller.clear(broadphase);\n\n            // update the grid buckets based on current bodies\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\n            broadphasePairs = broadphase.pairsList;\n        } else {\n            // if no broadphase set, we just pass all bodies\n            broadphasePairs = allBodies;\n        }\n\n        // clear all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // narrowphase pass: find actual collisions, then create or update collision pairs\n        var collisions = broadphase.detector(broadphasePairs, engine);\n\n        // update collision pairs\n        var pairs = engine.pairs,\n            timestamp = timing.timestamp;\n        Pairs.update(pairs, collisions, timestamp);\n        Pairs.removeOld(pairs, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine including the world, pairs and broadphase.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        var world = engine.world;\n        \n        Pairs.clear(engine.pairs);\n\n        var broadphase = engine.broadphase;\n        if (broadphase.controller) {\n            var bodies = Composite.allBodies(world);\n            broadphase.controller.clear(broadphase);\n            broadphase.controller.update(broadphase, bodies, engine, true);\n        }\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * An alias for `Runner.run`, see `Matter.Runner` for more information.\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n     * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n     *\n     * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n     * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n     *\n     * @property render\n     * @type render\n     * @deprecated see Demo.js for an example of creating a renderer\n     * @default a Matter.Render instance\n     */\n\n    /**\n     * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n     *\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * A `World` composite object that will contain all simulated bodies and constraints.\n     *\n     * @property world\n     * @type world\n     * @default a Matter.World instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Grid\":6,\"../collision/Pairs\":8,\"../collision/Resolver\":10,\"../constraint/Constraint\":12,\"../render/Render\":31,\"./Common\":14,\"./Events\":16,\"./Metrics\":18,\"./Sleeping\":22}],16:[function(_dereq_,module,exports){\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        if (object.events) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = object.events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"./Common\":14}],17:[function(_dereq_,module,exports){\n/**\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\n*\n* @class Matter\n*/\n\nvar Matter = {};\n\nmodule.exports = Matter;\n\nvar Plugin = _dereq_('./Plugin');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * The library name.\n     * @property name\n     * @readOnly\n     * @type {String}\n     */\n    Matter.name = 'matter-js';\n\n    /**\n     * The library version.\n     * @property version\n     * @readOnly\n     * @type {String}\n     */\n    Matter.version = '0.14.2';\n\n    /**\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\n     * @property uses\n     * @type {Array}\n     */\n    Matter.uses = [];\n\n    /**\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\n     * @property used\n     * @readOnly\n     * @type {Array}\n     */\n    Matter.used = [];\n\n    /**\n     * Installs the given plugins on the `Matter` namespace.\n     * This is a short-hand for `Plugin.use`, see it for more information.\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\n     * @method use\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\n     */\n    Matter.use = function() {\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method before\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.before = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathBefore(Matter, path, func);\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method after\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.after = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathAfter(Matter, path, func);\n    };\n\n})();\n\n},{\"./Common\":14,\"./Plugin\":20}],18:[function(_dereq_,module,exports){\n\n},{\"../body/Composite\":2,\"./Common\":14}],19:[function(_dereq_,module,exports){\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = mouse.element.getAttribute('data-pixel-ratio') || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n},{\"../core/Common\":14}],20:[function(_dereq_,module,exports){\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var identifiers = range.split('-');\n        range = identifiers[0];\n\n        var isRange = isNaN(Number(range[0])),\n            version = isRange ? range.substr(1) : range,\n            parts = Common.map(version.split('.'), function(part) {\n                return Number(part);\n            });\n\n        return {\n            isRange: isRange,\n            version: version,\n            range: range,\n            operator: isRange ? range[0] : '',\n            parts: parts,\n            prerelease: identifiers[1],\n            number: parts[0] * 1e8 + parts[1] * 1e4 + parts[2]\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var rangeParsed = Plugin.versionParse(range),\n            rangeParts = rangeParsed.parts,\n            versionParsed = Plugin.versionParse(version),\n            versionParts = versionParsed.parts;\n\n        if (rangeParsed.isRange) {\n            if (rangeParsed.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (rangeParsed.operator === '~') {\n                return versionParts[0] === rangeParts[0] && versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n            }\n\n            if (rangeParsed.operator === '^') {\n                if (rangeParts[0] > 0) {\n                    return versionParts[0] === rangeParts[0] && versionParsed.number >= rangeParsed.number;\n                }\n\n                if (rangeParts[1] > 0) {\n                    return versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n                }\n\n                return versionParts[2] === rangeParts[2];\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n},{\"./Common\":14}],21:[function(_dereq_,module,exports){\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = _dereq_('./Events');\nvar Engine = _dereq_('./Engine');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n        Events.trigger(engine, 'beforeTick', event); // @deprecated\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n        Events.trigger(engine, 'tick', event); // @deprecated\n\n        // if world has been modified, clear the render scene graph\n        if (engine.world.isModified \n            && engine.render\n            && engine.render.controller\n            && engine.render.controller.clear) {\n            engine.render.controller.clear(engine.render); // @deprecated\n        }\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        // render\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            Events.trigger(runner, 'beforeRender', event);\n            Events.trigger(engine, 'beforeRender', event); // @deprecated\n\n            engine.render.controller.world(engine.render);\n\n            Events.trigger(runner, 'afterRender', event);\n            Events.trigger(engine, 'afterRender', event); // @deprecated\n        }\n\n        Events.trigger(runner, 'afterTick', event);\n        Events.trigger(engine, 'afterTick', event); // @deprecated\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n},{\"./Common\":14,\"./Engine\":15,\"./Events\":16}],22:[function(_dereq_,module,exports){\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = _dereq_('./Events');\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n},{\"./Events\":16}],23:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Vector = _dereq_('../geometry/Vector');\nvar decomp;\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\n     * If the vertices are convex, they will pass through as supplied.\n     * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\n     * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\n     * By default the decomposition will discard collinear edges (to improve performance).\n     * It can also optionally discard any parts that have an area less than `minimumArea`.\n     * If the vertices can not be decomposed, the result will fall back to using the convex hull.\n     * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param [[vector]] vertexSets\n     * @param {object} [options]\n     * @param {bool} [flagInternal=false]\n     * @param {number} [removeCollinear=0.01]\n     * @param {number} [minimumArea=10]\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea) {\n        if (!decomp) {\n            decomp = Common._requireGlobal('decomp', 'poly-decomp');\n        }\n\n        var body,\n            parts,\n            isConvex,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n\n        if (!decomp) {\n            Common.warn('Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.');\n        }\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n\n            if (isConvex || !decomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],24:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bodies = _dereq_('./Bodies');\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * Creates a composite with a Newton's Cradle setup of bodies and constraints.\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                            { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n    \n    /**\n     * Creates a composite with simple car setup of bodies and constraints.\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    /**\n     * Creates a simple soft body like object.\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Bodies\":23}],25:[function(_dereq_,module,exports){\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],26:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n},{}],27:[function(_dereq_,module,exports){\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n},{\"../core/Common\":14,\"../geometry/Bounds\":26}],28:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n},{}],29:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        var i;\n        if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x * scalar;\n                vertices[i].y += vector.y * scalar;\n            }\n        } else {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x;\n                vertices[i].y += vector.y;\n            }\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n                \n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],30:[function(_dereq_,module,exports){\nvar Matter = module.exports = _dereq_('../core/Matter');\n\nMatter.Body = _dereq_('../body/Body');\nMatter.Composite = _dereq_('../body/Composite');\nMatter.World = _dereq_('../body/World');\n\nMatter.Contact = _dereq_('../collision/Contact');\nMatter.Detector = _dereq_('../collision/Detector');\nMatter.Grid = _dereq_('../collision/Grid');\nMatter.Pairs = _dereq_('../collision/Pairs');\nMatter.Pair = _dereq_('../collision/Pair');\nMatter.Query = _dereq_('../collision/Query');\nMatter.Resolver = _dereq_('../collision/Resolver');\nMatter.SAT = _dereq_('../collision/SAT');\n\nMatter.Constraint = _dereq_('../constraint/Constraint');\nMatter.MouseConstraint = _dereq_('../constraint/MouseConstraint');\n\nMatter.Common = _dereq_('../core/Common');\nMatter.Engine = _dereq_('../core/Engine');\nMatter.Events = _dereq_('../core/Events');\nMatter.Mouse = _dereq_('../core/Mouse');\nMatter.Runner = _dereq_('../core/Runner');\nMatter.Sleeping = _dereq_('../core/Sleeping');\nMatter.Plugin = _dereq_('../core/Plugin');\n\n\nMatter.Bodies = _dereq_('../factory/Bodies');\nMatter.Composites = _dereq_('../factory/Composites');\n\nMatter.Axes = _dereq_('../geometry/Axes');\nMatter.Bounds = _dereq_('../geometry/Bounds');\nMatter.Svg = _dereq_('../geometry/Svg');\nMatter.Vector = _dereq_('../geometry/Vector');\nMatter.Vertices = _dereq_('../geometry/Vertices');\n\nMatter.Render = _dereq_('../render/Render');\nMatter.RenderPixi = _dereq_('../render/RenderPixi');\n\n// aliases\n\nMatter.World.add = Matter.Composite.add;\nMatter.World.remove = Matter.Composite.remove;\nMatter.World.addComposite = Matter.Composite.addComposite;\nMatter.World.addBody = Matter.Composite.addBody;\nMatter.World.addConstraint = Matter.Composite.addConstraint;\nMatter.World.clear = Matter.Composite.clear;\nMatter.Engine.run = Matter.Runner.run;\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Contact\":4,\"../collision/Detector\":5,\"../collision/Grid\":6,\"../collision/Pair\":7,\"../collision/Pairs\":8,\"../collision/Query\":9,\"../collision/Resolver\":10,\"../collision/SAT\":11,\"../constraint/Constraint\":12,\"../constraint/MouseConstraint\":13,\"../core/Common\":14,\"../core/Engine\":15,\"../core/Events\":16,\"../core/Matter\":17,\"../core/Metrics\":18,\"../core/Mouse\":19,\"../core/Plugin\":20,\"../core/Runner\":21,\"../core/Sleeping\":22,\"../factory/Bodies\":23,\"../factory/Composites\":24,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Svg\":27,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31,\"../render/RenderPixi\":32}],31:[function(_dereq_,module,exports){\n/**\n* The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = _dereq_('../core/Common');\nvar Composite = _dereq_('../body/Composite');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Events = _dereq_('../core/Events');\nvar Grid = _dereq_('../collision/Grid');\nvar Vector = _dereq_('../geometry/Vector');\nvar Mouse = _dereq_('../core/Mouse');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#18181d',\n                wireframeBackground: '#0f0f13',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            Render.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n        render.context.scale(pixelRatio, pixelRatio);\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.showBroadphase && engine.broadphase.controller === Grid)\n            Render.grid(render, engine.broadphase, context);\n\n        if (options.showDebug)\n            Render.debug(render, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method debug\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.debug = function(render, context) {\n        var c = context,\n            engine = render.engine,\n            world = engine.world,\n            metrics = engine.metrics,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            space = \"    \";\n\n        if (engine.timing.timestamp - (render.debugTimestamp || 0) >= 500) {\n            var text = \"\";\n\n            if (metrics.timing) {\n                text += \"fps: \" + Math.round(metrics.timing.fps) + space;\n            }\n\n\n            render.debugString = text;\n            render.debugTimestamp = engine.timing.timestamp;\n        }\n\n        if (render.debugString) {\n            c.font = \"12px Arial\";\n\n            if (options.wireframes) {\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n            } else {\n                c.fillStyle = 'rgba(0,0,0,0.5)';\n            }\n\n            var split = render.debugString.split('\\n');\n\n            for (var i = 0; i < split.length; i++) {\n                c.fillText(split[i], 50, 50 + i * 18);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodyShadows\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyShadows = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            if (body.circleRadius) {\n                c.beginPath();\n                c.arc(body.position.x, body.position.y, body.circleRadius, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                c.beginPath();\n                c.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (var j = 1; j < body.vertices.length; j++) {\n                    c.lineTo(body.vertices[j].x, body.vertices[j].y);\n                }\n                c.closePath();\n            }\n\n            var distanceX = body.position.x - render.options.width * 0.5,\n                distanceY = body.position.y - render.options.height * 0.2,\n                distance = Math.abs(distanceX) + Math.abs(distanceY);\n\n            c.shadowColor = 'rgba(0,0,0,0.15)';\n            c.shadowOffsetX = 0.05 * distanceX;\n            c.shadowOffsetY = 0.05 * distanceY;\n            c.shadowBlur = 1 + 12 * Math.min(1, distance / 1000);\n\n            c.fill();\n\n            c.shadowColor = null;\n            c.shadowOffsetX = null;\n            c.shadowOffsetY = null;\n            c.shadowBlur = null;\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                                 (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method grid\n     * @param {render} render\n     * @param {grid} grid\n     * @param {RenderingContext} context\n     */\n    Render.grid = function(render, grid, context) {\n        var c = context,\n            options = render.options;\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n        } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n        }\n\n        c.beginPath();\n\n        var bucketKeys = Common.keys(grid.buckets);\n\n        for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n\n            if (grid.buckets[bucketId].length < 2)\n                continue;\n\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth,\n                    0.5 + parseInt(region[2], 10) * grid.bucketHeight,\n                    grid.bucketWidth,\n                    grid.bucketHeight);\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                             Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                         Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Description\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Grid\":6,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}],32:[function(_dereq_,module,exports){\n/**\n* The `Matter.RenderPixi` module is an example renderer using pixi.js.\n* See also `Matter.Render` for a canvas based renderer.\n*\n* @class RenderPixi\n* @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n* It will likely be moved to its own repository (but maintenance will be limited).\n*/\n\nvar RenderPixi = {};\n\nmodule.exports = RenderPixi;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Events = _dereq_('../core/Events');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame \n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n    \n    /**\n     * Creates a new Pixi.js WebGL renderer\n     * @method create\n     * @param {object} options\n     * @return {RenderPixi} A new renderer\n     * @deprecated\n     */\n    RenderPixi.create = function(options) {\n        Common.warn('RenderPixi.create: Matter.RenderPixi is deprecated (see docs)');\n\n        var defaults = {\n            controller: RenderPixi,\n            engine: null,\n            element: null,\n            frameRequestId: null,\n            canvas: null,\n            renderer: null,\n            container: null,\n            spriteContainer: null,\n            pixiOptions: null,\n            options: {\n                width: 800,\n                height: 600,\n                background: '#fafafa',\n                wireframeBackground: '#222',\n                hasBounds: false,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false\n            }\n        };\n\n        var render = Common.extend(defaults, options),\n            transparent = !render.options.wireframes && render.options.background === 'transparent';\n\n        // init pixi\n        render.pixiOptions = render.pixiOptions || {\n            view: render.canvas,\n            transparent: transparent,\n            antialias: true,\n            backgroundColor: options.background\n        };\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.renderer = render.renderer || new PIXI.WebGLRenderer(render.options.width, render.options.height, render.pixiOptions);\n        render.container = render.container || new PIXI.Container();\n        render.spriteContainer = render.spriteContainer || new PIXI.Container();\n        render.canvas = render.canvas || render.renderer.view;\n        render.bounds = render.bounds || { \n            min: {\n                x: 0,\n                y: 0\n            }, \n            max: { \n                x: render.options.width,\n                y: render.options.height\n            }\n        };\n\n        // event listeners\n        Events.on(render.engine, 'beforeUpdate', function() {\n            RenderPixi.clear(render);\n        });\n\n        // caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // use a sprite batch for performance\n        render.container.addChild(render.spriteContainer);\n\n        // insert canvas\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else {\n            Common.warn('No \"render.element\" passed, \"render.canvas\" was not inserted into document.');\n        }\n\n        // prevent menus on canvas\n        render.canvas.oncontextmenu = function() { return false; };\n        render.canvas.onselectstart = function() { return false; };\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            RenderPixi.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Clears the scene graph\n     * @method clear\n     * @param {RenderPixi} render\n     * @deprecated\n     */\n    RenderPixi.clear = function(render) {\n        var container = render.container,\n            spriteContainer = render.spriteContainer;\n\n        // clear stage container\n        while (container.children[0]) { \n            container.removeChild(container.children[0]); \n        }\n\n        // clear sprite batch\n        while (spriteContainer.children[0]) { \n            spriteContainer.removeChild(spriteContainer.children[0]); \n        }\n\n        var bgSprite = render.sprites['bg-0'];\n\n        // clear caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // set background sprite\n        render.sprites['bg-0'] = bgSprite;\n        if (bgSprite)\n            container.addChildAt(bgSprite, 0);\n\n        // add sprite batch back into container\n        render.container.addChild(render.spriteContainer);\n\n        // reset background state\n        render.currentBackground = null;\n\n        // reset bounds transforms\n        container.scale.set(1, 1);\n        container.position.set(0, 0);\n    };\n\n    /**\n     * Sets the background of the canvas \n     * @method setBackground\n     * @param {RenderPixi} render\n     * @param {string} background\n     * @deprecated\n     */\n    RenderPixi.setBackground = function(render, background) {\n        if (render.currentBackground !== background) {\n            var isColor = background.indexOf && background.indexOf('#') !== -1,\n                bgSprite = render.sprites['bg-0'];\n\n            if (isColor) {\n                // if solid background color\n                var color = Common.colorToNumber(background);\n                render.renderer.backgroundColor = color;\n\n                // remove background sprite if existing\n                if (bgSprite)\n                    render.container.removeChild(bgSprite); \n            } else {\n                // initialise background sprite if needed\n                if (!bgSprite) {\n                    var texture = _getTexture(render, background);\n\n                    bgSprite = render.sprites['bg-0'] = new PIXI.Sprite(texture);\n                    bgSprite.position.x = 0;\n                    bgSprite.position.y = 0;\n                    render.container.addChildAt(bgSprite, 0);\n                }\n            }\n\n            render.currentBackground = background;\n        }\n    };\n\n    /**\n     * Description\n     * @method world\n     * @param {engine} engine\n     * @deprecated\n     */\n    RenderPixi.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            renderer = render.renderer,\n            container = render.container,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            constraints = [],\n            i;\n\n        if (options.wireframes) {\n            RenderPixi.setBackground(render, options.wireframeBackground);\n        } else {\n            RenderPixi.setBackground(render, options.background);\n        }\n\n        // handle bounds\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        if (options.hasBounds) {\n            // Hide bodies that are not in view\n            for (i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);\n            container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));\n        } else {\n            constraints = allConstraints;\n        }\n\n        for (i = 0; i < bodies.length; i++)\n            RenderPixi.body(render, bodies[i]);\n\n        for (i = 0; i < constraints.length; i++)\n            RenderPixi.constraint(render, constraints[i]);\n\n        renderer.render(container);\n    };\n\n\n    /**\n     * Description\n     * @method constraint\n     * @param {engine} engine\n     * @param {constraint} constraint\n     * @deprecated\n     */\n    RenderPixi.constraint = function(render, constraint) {\n        var engine = render.engine,\n            bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB,\n            container = render.container,\n            constraintRender = constraint.render,\n            primitiveId = 'c-' + constraint.id,\n            primitive = render.primitives[primitiveId];\n\n        // initialise constraint primitive if not existing\n        if (!primitive)\n            primitive = render.primitives[primitiveId] = new PIXI.Graphics();\n\n        // don't render if constraint does not have two end points\n        if (!constraintRender.visible || !constraint.pointA || !constraint.pointB) {\n            primitive.clear();\n            return;\n        }\n\n        // add to scene graph if not already there\n        if (Common.indexOf(container.children, primitive) === -1)\n            container.addChild(primitive);\n\n        // render the constraint on every update, since they can change dynamically\n        primitive.clear();\n        primitive.beginFill(0, 0);\n        primitive.lineStyle(constraintRender.lineWidth, Common.colorToNumber(constraintRender.strokeStyle), 1);\n        \n        if (bodyA) {\n            primitive.moveTo(bodyA.position.x + pointA.x, bodyA.position.y + pointA.y);\n        } else {\n            primitive.moveTo(pointA.x, pointA.y);\n        }\n\n        if (bodyB) {\n            primitive.lineTo(bodyB.position.x + pointB.x, bodyB.position.y + pointB.y);\n        } else {\n            primitive.lineTo(pointB.x, pointB.y);\n        }\n\n        primitive.endFill();\n    };\n    \n    /**\n     * Description\n     * @method body\n     * @param {engine} engine\n     * @param {body} body\n     * @deprecated\n     */\n    RenderPixi.body = function(render, body) {\n        var engine = render.engine,\n            bodyRender = body.render;\n\n        if (!bodyRender.visible)\n            return;\n\n        if (bodyRender.sprite && bodyRender.sprite.texture) {\n            var spriteId = 'b-' + body.id,\n                sprite = render.sprites[spriteId],\n                spriteContainer = render.spriteContainer;\n\n            // initialise body sprite if not existing\n            if (!sprite)\n                sprite = render.sprites[spriteId] = _createBodySprite(render, body);\n\n            // add to scene graph if not already there\n            if (Common.indexOf(spriteContainer.children, sprite) === -1)\n                spriteContainer.addChild(sprite);\n\n            // update body sprite\n            sprite.position.x = body.position.x;\n            sprite.position.y = body.position.y;\n            sprite.rotation = body.angle;\n            sprite.scale.x = bodyRender.sprite.xScale || 1;\n            sprite.scale.y = bodyRender.sprite.yScale || 1;\n        } else {\n            var primitiveId = 'b-' + body.id,\n                primitive = render.primitives[primitiveId],\n                container = render.container;\n\n            // initialise body primitive if not existing\n            if (!primitive) {\n                primitive = render.primitives[primitiveId] = _createBodyPrimitive(render, body);\n                primitive.initialAngle = body.angle;\n            }\n\n            // add to scene graph if not already there\n            if (Common.indexOf(container.children, primitive) === -1)\n                container.addChild(primitive);\n\n            // update body primitive\n            primitive.position.x = body.position.x;\n            primitive.position.y = body.position.y;\n            primitive.rotation = body.angle - primitive.initialAngle;\n        }\n    };\n\n    /**\n     * Creates a body sprite\n     * @method _createBodySprite\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Sprite} sprite\n     * @deprecated\n     */\n    var _createBodySprite = function(render, body) {\n        var bodyRender = body.render,\n            texturePath = bodyRender.sprite.texture,\n            texture = _getTexture(render, texturePath),\n            sprite = new PIXI.Sprite(texture);\n\n        sprite.anchor.x = body.render.sprite.xOffset;\n        sprite.anchor.y = body.render.sprite.yOffset;\n\n        return sprite;\n    };\n\n    /**\n     * Creates a body primitive\n     * @method _createBodyPrimitive\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Graphics} graphics\n     * @deprecated\n     */\n    var _createBodyPrimitive = function(render, body) {\n        var bodyRender = body.render,\n            options = render.options,\n            primitive = new PIXI.Graphics(),\n            fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n            strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleWireframe = Common.colorToNumber('#bbb'),\n            strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n            part;\n\n        primitive.clear();\n\n        // handle compound parts\n        for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n\n            if (!options.wireframes) {\n                primitive.beginFill(fillStyle, 1);\n                primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n                primitive.beginFill(0, 0);\n                primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            for (var j = 1; j < part.vertices.length; j++) {\n                primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            primitive.endFill();\n\n            // angle indicator\n            if (options.showAngleIndicator || options.showAxes) {\n                primitive.beginFill(0, 0);\n\n                if (options.wireframes) {\n                    primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n                } else {\n                    primitive.lineStyle(1, strokeStyleIndicator);\n                }\n\n                primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n                primitive.lineTo(((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2 - body.position.x), \n                                 ((part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2 - body.position.y));\n\n                primitive.endFill();\n            }\n        }\n\n        return primitive;\n    };\n\n    /**\n     * Gets the requested texture (a PIXI.Texture) via its path\n     * @method _getTexture\n     * @private\n     * @param {RenderPixi} render\n     * @param {string} imagePath\n     * @return {PIXI.Texture} texture\n     * @deprecated\n     */\n    var _getTexture = function(render, imagePath) {\n        var texture = render.textures[imagePath];\n\n        if (!texture)\n            texture = render.textures[imagePath] = PIXI.Texture.fromImage(imagePath);\n\n        return texture;\n    };\n\n})();\n\n},{\"../body/Composite\":2,\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}]},{},[30])(30)\n});\n","\nconst ballSvgAssets = [\n    require('../../assets/svg/blue-ball.svg'),\n    require('../../assets/svg/green-ball.svg'),\n    require('../../assets/svg/greenish-ball.svg'),\n    require('../../assets/svg/orange-ball.svg'),\n    require('../../assets/svg/pink-ball.svg'),\n    require('../../assets/svg/purple-ball.svg'),\n    require('../../assets/svg/red-ball.svg'),\n    require('../../assets/svg/yellow-ball.svg'),\n];\n\ntype BaseBallTextureProps = {\n    radius?: number;\n    fontSize?: null | number;\n    fontFamily?: string;\n    fontFillStyle?: string;\n    fontXOffset?: number;\n    fontYOffset?: number;\n};\n// TODO: create fn to create single ballTexture (for debugging)\n\ntype BallTextureProps = {\n    textContent: string;\n} & BaseBallTextureProps;\n\nconst defaultBallTextureProps: Partial<BallTextureProps> = {\n    radius: 25,\n    fontSize: null,\n    fontFamily: 'Arial, sans-serif',\n    fontFillStyle: '#000000',\n    fontXOffset: 0,\n    fontYOffset: 0,\n};\n\nlet canvas: HTMLCanvasElement | null = null;\nexport const BallTexture = async (props: BallTextureProps): Promise<string> => {\n\n    const p: BallTextureProps = {\n        ...defaultBallTextureProps,\n        ...props,\n    }\n\n    const canvasSize = p.radius * 2;\n\n    let fontSize = p.fontSize || p.radius;\n\n    if (!canvas || canvas.getAttribute('width') !== canvasSize.toString()) {\n        canvas = document.createElement('canvas');\n        canvas.setAttribute('width', canvasSize.toString());\n        canvas.setAttribute('height', canvasSize.toString());\n    }\n\n    const context = canvas.getContext('2d');\n\n    const dataUrl: string = await new Promise((resolve, reject) => {\n\n        context.clearRect(0, 0, canvasSize, canvasSize);\n\n        const img = document.createElement('img');\n        img.src = ballSvgAssets[Math.floor(Math.random() * ballSvgAssets.length)];\n\n        const onImageLoad = (event) => {\n            event.target.removeEventListener('load', onImageLoad);\n            context.drawImage(event.target, 0, 0, canvasSize, canvasSize);\n            context.font = `${fontSize}px ${p.fontFamily}`;\n            context.textBaseline = 'middle';\n            context.textAlign = \"center\";\n            context.fillStyle = p.fontFillStyle;\n            context.fillText(`${p.textContent}`, p.radius + p.fontXOffset, p.radius + p.fontYOffset);\n            resolve(canvas.toDataURL());\n        };\n\n        img.addEventListener('load', onImageLoad);\n\n    });\n\n    return dataUrl;\n\n};\n\n// create multiple textures helper\nexport const createBallTextures = async (nrOfBalls: number, config?: Partial<BaseBallTextureProps>) => {\n\n    const ballTextures: string[] = [];\n\n    for (let i = 0; i < nrOfBalls; i++) {\n\n        ballTextures.push(\n            await BallTexture({\n                textContent: `${i + 1}`,\n                ...config\n            })\n        );\n\n    }\n\n    // clear up canvas for now:\n    canvas = null;\n\n    // for debug:\n    // document.body.appendChild(canvas);\n\n    return ballTextures.sort(function () { return 0.5 - Math.random() });\n\n};","\n// These are default values that can be changed by passing \n// different props to the Wheel function\nexport const DEFAULT_NR_OF_BALLS = 75;\nexport const DEFAULT_BALL_RADIUS = 16;\nexport const DEFAULT_WHEEL_RADIUS = 250;\nexport const DEFAULT_CANVAS_WIDTH = 800;\nexport const DEFAULT_CANVAS_HEIGHT = 600;\n\n// These are constants that cannot be changed\nexport const BALL_BODY_MASS = 1;\nexport const BALL_BODY_DENSITY = 1;","import Matter from 'matter-js';\nimport { BALL_BODY_MASS } from '../../constants';\n\ntype BallBodyProps = {\n    radius: number;\n    texture: null | string;\n    xPosition: number;\n    yPosition: number;\n}\n\nconst defaultBallBodyProps: Partial<BallBodyProps> = {\n    radius: 16,\n    texture: null,\n    xPosition: 0,\n    yPosition: 0,\n};\n\n\nexport const BallBody = (props: Partial<BallBodyProps> = {}, matterBodyOpts = {}) => {\n\n    const p = {\n        ...defaultBallBodyProps,\n        ...props\n    };\n\n    let renderObj = {};\n    if (p.texture) {\n        renderObj = {\n            render: {\n                sprite: {\n                    texture: p.texture\n                }\n            }\n        }\n    }\n\n    const ball = Matter.Bodies.circle(p.xPosition, p.yPosition, p.radius,\n        {\n            restitution: 1,\n            mass: BALL_BODY_MASS,\n            friction: 0.2,\n            ...renderObj,\n            ...matterBodyOpts,\n        }\n    );\n\n    return ball;\n\n};","import Matter from 'matter-js';\n\ntype WheelBodyProps = {\n    radius: number;\n    offsetX: number;\n    offsetY: number;\n    nrOfVertices: number;\n    verticyWidth: number;\n    verticyLength: number;\n}\n\nconst defaultWheelBodyProps: Partial<WheelBodyProps> = {\n    radius: 250,\n    offsetX: 0,\n    offsetY: 0,\n    nrOfVertices: 80,\n    verticyWidth: 5,\n    verticyLength: 36\n};\n\nexport const WheelBodyArr = (props: Partial<WheelBodyProps>): Matter.Body[] => {\n\n    const p = {\n        ...defaultWheelBodyProps,\n        ...props\n    };\n\n    /* THETA is the angle of separation between each elemtents */\n    const theta = 2 * Math.PI / p.nrOfVertices;\n    const verts = [];\n\n    for (let i = 0; i < p.nrOfVertices; i++) {\n\n        let xPosition: number, yPosition: number;\n\n        let currentAngle = i * theta;// calculate the current angle\n        /* Get the positions */\n        xPosition = p.radius * Math.cos(currentAngle);\n        yPosition = p.radius * Math.sin(currentAngle);\n\n        const vert = Matter.Bodies.rectangle(\n            p.radius + xPosition + p.offsetX,\n            p.radius + yPosition + p.offsetY,\n            p.verticyWidth,\n            p.verticyLength,\n            {\n                angle: (currentAngle * 15.91549) * (2 * Math.PI / 100),\n                density: 1,\n                isStatic: true\n            });\n\n        verts.push(vert);\n\n    }\n\n    return verts;\n\n};","import Matter from 'matter-js';\nimport { createBallTextures } from './textures/ball';\nimport { BallBody } from './bodies/ball';\nimport { WheelBodyArr } from './bodies/wheel';\n\nexport type WheelProps = {\n    element: string | HTMLCanvasElement;\n    canvasWidth: number;\n    canvasHeight: number;\n    wheelRadius: number;\n    nrOfBalls: number;\n    ballRadius: number;\n};\n\nexport const Wheel =\n    async ({ element, ...config }: WheelProps) => {\n\n        let el: HTMLCanvasElement;\n        if ('string' === typeof element) {\n            el = document.querySelector(element);\n        }\n        else {\n            el = element;\n        }\n\n        const Engine = Matter.Engine,\n            Render = Matter.Render,\n            Runner = Matter.Runner,\n            World = Matter.World,\n            Bodies = Matter.Bodies;\n\n        console.log(Object.getOwnPropertyNames(Matter.Body));\n\n        // now create a canvas\n\n        const engine = Engine.create();\n        const world = engine.world;\n\n        const render = Render.create({\n            element: el,\n            engine: engine,\n            options: {\n                width: config.canvasWidth,\n                height: config.canvasHeight,\n                showAngleIndicator: false,\n                wireframes: false,\n            }\n        });\n\n        const ground = Bodies.rectangle(400, 610, 810, 60, { isStatic: true });\n\n        World.add(world, [\n            ground\n        ]);\n\n        const wheelBodyParts = WheelBodyArr({\n            radius: config.wheelRadius,\n            offsetX: (config.canvasWidth - config.wheelRadius * 2) / 2,\n            offsetY: (config.canvasHeight - config.wheelRadius * 2) / 2,\n        });\n\n        World.add(\n            world,\n            wheelBodyParts\n        );\n\n        // create 'stirrer' (for animation)\n        const stir = Bodies.rectangle(\n            config.canvasWidth / 2,\n            config.canvasHeight * 0.6,\n            10,\n            config.canvasHeight * 0.8,\n            {\n                angle: 0,\n                isStatic: true,\n                isVisible: false,\n                density: 1,\n            }\n        );\n\n        World.add(world, [stir]);\n\n        let stirAngle = 0;\n\n        setInterval(() => {\n            stirAngle += 0.03;\n            Matter.Body.setAngle(stir, stirAngle);\n            // Matter.Body.setHeight(stir, Math.random() * 300);\n        }, 10);\n\n        const ballRadius = config.wheelRadius;\n        const balls = new Map<Matter.Body, any>();\n\n        if (config.nrOfBalls > 0) {\n\n            const ballTextures = await createBallTextures(\n                config.nrOfBalls,\n                {\n                    radius: ballRadius,\n                }\n            );\n            // textures are ready\n            for (let ballTexture of ballTextures) {\n                const ball = BallBody({\n                    texture: ballTexture,\n                    radius: ballRadius,\n                    xPosition: Math.floor(config.canvasWidth / 2),\n                    yPosition: Math.floor(config.canvasHeight / 2),\n                });\n\n                balls.set(ball, {\n                    imgData: ballTexture,\n                });\n\n            }\n\n            World.add(\n                world,\n                balls.keys()\n            );\n\n        }\n\n        Render.lookAt(render, {\n            min: { x: 0, y: 0 },\n            max: { x: config.canvasWidth, y: config.canvasHeight }\n        });\n\n        Engine.run(engine);\n        Render.run(render);\n\n        const runner = Runner.create();\n        Runner.run(runner, engine);\n\n        // TODO: after render event: draw images\n        // Matter.Events.on(render, 'afterRender', (event) => {\n        //     const {\n        //         canvas,\n        //         context\n        //     } = event.source;\n        //     // draw image of the 'wheel' ?\n        // });\n\n\n\n        // create the balls\n\n        return {\n\n            randomBall() {\n                // get ball and remove it from the world!\n                if (balls.size === 0) {\n                    return null;\n                }\n                const randomIndex = Math.floor(Math.random() * balls.size);\n                const randomBall = [...balls.keys()].splice(randomIndex, 1)[0];\n                const ballMetadata = balls.get(randomBall);\n                World.remove(world, randomBall);\n                balls.delete(randomBall);\n                return ballMetadata;\n            },\n            _internals: {\n                engine,\n                world,\n                render\n            }\n        };\n\n    };","import * as dat from 'dat.gui';\nimport Matter from 'matter-js';\nimport WebFont from 'webfontloader';\nimport Stats from 'stats.js';\n\nimport { Wheel } from '../../../src/wheel/wheel';\nimport { BallTexture } from '../../../src/wheel/textures/ball';\nimport { BallBody } from '../../../src/wheel/bodies/ball';\nimport {\n  DEFAULT_BALL_RADIUS,\n  DEFAULT_WHEEL_RADIUS,\n  DEFAULT_CANVAS_HEIGHT,\n  DEFAULT_CANVAS_WIDTH,\n  BALL_BODY_MASS,\n  BALL_BODY_DENSITY,\n  DEFAULT_NR_OF_BALLS\n} from '../../../src/constants';\n\nconst MAX_NR_OF_BALLS = 200;\nconst MAX_BALL_RADIUS = 20;\nconst GOOGLE_FONT_FAMILY = 'Droid Sans';\n\nconst timeout = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst loadCustomFont = () =>\n  new Promise((resolve) => {\n    WebFont.load({\n      google: {\n        families: [\n          GOOGLE_FONT_FAMILY\n        ]\n      },\n      active: resolve,\n    });\n  });\n\nconst onWindowLoad = async () => {\n\n  // TODO: show loader\n  const gui = new dat.GUI();\n\n  await loadCustomFont();\n\n  // We will create balls ourself so we can debug them\n  const wheel = await Wheel({\n    element: '#wheel',\n    nrOfBalls: 0,\n    canvasWidth: DEFAULT_CANVAS_WIDTH,\n    canvasHeight: DEFAULT_CANVAS_HEIGHT,\n    wheelRadius: DEFAULT_WHEEL_RADIUS,\n    ballRadius: DEFAULT_BALL_RADIUS\n  });\n\n  // get internals for debug purposes\n  const {\n    world,\n    render,\n    engine\n  } = wheel._internals;\n\n  const fpsStats = new Stats();\n  fpsStats.showPanel(0);\n  document.querySelector('#app').appendChild(fpsStats.dom);\n\n  Matter.Events.on(render, \"beforeRender\", fpsStats.begin);\n  Matter.Events.on(render, \"afterRender\", fpsStats.end);\n\n  const debugInterface = {\n    _ballIndex: 1,\n    _nrOfBalls: DEFAULT_NR_OF_BALLS,\n    _ballRadius: DEFAULT_BALL_RADIUS,\n    _ballMass: BALL_BODY_MASS,\n    _ballDensity: BALL_BODY_DENSITY,\n    set nrOfBalls(n: number) {\n      this._nrOfBalls = n;\n    },\n    get nrOfBalls() {\n      return this._nrOfBalls;\n    },\n    set ballMass(m: number) {\n      this._ballMass = m;\n    },\n    get ballMass() {\n      return this._ballMass;\n    },\n    set ballDensity(d: number) {\n      this._ballDensity = d;\n    },\n    get ballDensity() {\n      return this._ballDensity;\n    },\n    set ballRadius(r: number) {\n      this._ballRadius = r;\n    },\n    get ballRadius() {\n      return this._ballRadius;\n    }\n  };\n\n  const createBall = async (index: number) => {\n\n    const texture = await BallTexture({\n      textContent: `${index + 1}`,\n      radius: debugInterface.ballRadius,\n    });\n\n    const ball = BallBody({\n      radius: debugInterface.ballRadius,\n      texture,\n      xPosition: render.canvas.clientWidth / 2,\n      yPosition: 100,\n    });\n\n    return ball;\n\n  };\n\n  let balls = [];\n\n  const update = async () => {\n\n    // loop over balls and set props\n\n    if (debugInterface.nrOfBalls !== balls.length) {\n      if (debugInterface.nrOfBalls > balls.length) {\n\n        const diff = debugInterface.nrOfBalls - balls.length;\n\n        for (let i = 0; i < diff; i++) {\n\n          const ball = await createBall(\n            debugInterface._ballIndex\n          );\n\n          Matter.World.add(\n            world,\n            ball\n          );\n\n          balls.push(ball);\n\n          debugInterface._ballIndex++;\n\n          await timeout(50);\n\n        }\n\n      }\n      else {\n\n        const diff = balls.length - debugInterface.nrOfBalls;\n        const removeBalls = balls.splice(balls.length - diff, diff);\n\n        Matter.World.remove(\n          world,\n          removeBalls\n        );\n\n      }\n    }\n\n    let _balls = [];\n\n    for (let i = 0; i < balls.length; i++) {\n\n      let ball = balls[i];\n\n      if (ball.mass !== debugInterface.ballMass) {\n        Matter.Body.setMass(ball, debugInterface.ballMass);\n      }\n      if (ball.density !== debugInterface.ballDensity) {\n        Matter.Body.setDensity(ball, debugInterface.ballDensity);\n      }\n\n      // if there is a radius update, remove and add new ball with new radius\n      if (ball.circleRadius !== debugInterface.ballRadius) {\n\n        Matter.World.remove(world, ball);\n\n        const texture = await BallTexture({\n          textContent: `${i + 1}`,\n          radius: debugInterface.ballRadius,\n        });\n\n        ball = BallBody({\n          radius: debugInterface.ballRadius,\n          texture,\n          xPosition: render.canvas.clientWidth / 2,\n          yPosition: 100,\n        });\n\n        Matter.World.add(world, ball);\n\n        await timeout(50);\n\n      }\n\n      _balls.push(ball);\n    }\n\n    balls = _balls;\n\n    // get wheel body and update props?\n\n    // get stir body and update props?\n\n  }\n\n  gui.add(debugInterface, 'nrOfBalls', 1, MAX_NR_OF_BALLS);\n\n  gui.add(debugInterface, 'ballRadius', 5, MAX_BALL_RADIUS);\n\n  gui.add(debugInterface, 'ballMass');\n\n  gui.add(debugInterface, 'ballDensity');\n\n  const ballsEl = document.querySelector('#balls');\n  const customFnsInterface = {\n    pickBall() {\n\n      const randomIndex = Math.floor(Math.random() * balls.length);\n      const ball = balls.splice(randomIndex, 1)[0];\n\n      // remove from world also\n      Matter.World.remove(\n        world,\n        ball\n      );\n\n      const img = document.createElement('img');\n      img.src = ball.render.sprite.texture;\n      ballsEl.appendChild(\n        img\n      );\n\n      debugInterface.nrOfBalls = debugInterface.nrOfBalls - 1;\n\n    },\n  };\n\n  gui.add(customFnsInterface, 'pickBall');\n\n  const onTimeout = async () => {\n    await update();\n    setTimeout(onTimeout, 1000);\n  };\n\n  onTimeout();\n\n};\n\nwindow.addEventListener('load', onWindowLoad);\n"]}